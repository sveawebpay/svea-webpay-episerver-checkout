class Address {
    CountryClick(selector) {
        if (selector == undefined || selector == "") {
            selector = ".jsCountrySelectionContainer";
        }

        $(selector).change(function () {
            var countryCode = $(this).find('option:selected').val();
            var region = $(this).find('option:selected').val();
            var inputName = $(this).closest('form').find('.jsRegionName').val();
            var element = $(this);
            axios.get("/addressbook/GetRegions?countryCode=" + countryCode + "&region=" + region + "&inputName=" + inputName)
                .then(function (r) {
                    if ($(element).parents('form').length > 0) {
                        var region = $(element).closest('form').find('.jsCountryRegionContainer').first();
                        region.html(r.data);
                    } else {
                        var region = $(element).parent().siblings('.jsCountryRegionContainer').first();
                        region.html(r.data);
                    }

                    feather.replace();
                    var dropdown = new Dropdown(region);
                    dropdown.Init();
                })
                .catch(function (e) {
                    notification.Error(e);
                })
        })
    }

    LoadAddressInRegisterUser() {
        var inst = this;
        $('.jsCountrySelectionRegisterUser').click(function () {
            var element = this;
            var data = $(this).find('.jsCountryOptionName').val();
            if ($(this).find('option').length == 0) {
                axios.get('/header/getcountryoptions?inputName=' + data)
                    .then(function (r) {
                        var html = $(r.data).html();
                        $(element).html(html);
                        feather.replace();
                        var dropdown = new Dropdown(element);
                        dropdown.Init();
                        inst.CountryClick(element);

                        $('#login-selector-signup').click(function (e) {
                            if (!($(e.target).parents('.dropdown').children('.dropdown__selected').length > 0 || $(e.target).hasClass('.dropdown'))) {
                                $('.dropdown__group').hide();
                            }
                        });

                        $(element).find('.dropdown__selected').first().click();
                    })
                    .catch(function (e) {

                    })
                    .finally(function () {

                    })
            }
        })
    }

    Init() {
        this.CountryClick();
        this.LoadAddressInRegisterUser();
    }
}
class B2BOrder {
    FilterByStatus() {
        $('.jsFilterOrderByStatus').change(function () {
            var status = $(this).val();
            if (status == '') {
                $('.jsOrderRow').each(function (i, e) {
                    $(e).show();
                })
            } else {
                $('.jsOrderRow').each(function (i, e) {
                    if ($(e).hasClass(status)) {
                        $(e).show();
                    } else {
                        $(e).hide();
                    }
                })
            }
        })
    }

    ApproveOder() {
        $('.jsApproveOrder').click(function () {
            $('.loading-box').show();
            var form = $(this).closest("form");
            var orderLink = $(this).data("order-link");
            var data = { orderGroupId: orderLink };
            var postData = convertFormData(data);
            axios.post(form[0].action, postData)
                .then(function (r) {
                    if (r.data.Status == true) {
                        notification.Success("Success");
                        setTimeout(function () { window.location.href = window.location.href; }, 500);
                    } else {
                        notification.Error("Something went wrong.");
                    }
                })
                .catch(function (e) {
                    notification.Error(e);
                })
                .finally(function () {
                    $('.loading-box').hide();
                })
        })
    }

    Init() {
        this.FilterByStatus();
        this.ApproveOder();
    }
}
class BlockTracking  {
    init() {
        var inst = this;
        $('.heroblock').click(function (e) {
            inst.trackingHeroBlock(e);
        });

        $('.video-block').on('ended', function (e) {
            inst.trackingVideoBlock(e);
        });
    }

    trackingHeroBlock(e) {
        let data = {
            blockId: $(e.currentTarget).children('div').attr('blockId'),
            blockName: $(e.currentTarget).children('div').attr('name'),
            pageName: $('title').text().replace(' - NOT FOR COMMERCIAL USE', ''),
            __RequestVerificationToken: token
        };

        axios.post('/publicapi/TrackHeroBlock', convertFormData(data))
            .then(function (result) {
                console.log("Hero Block clicked: '" + $(e.currentTarget).children('div').attr('name') + "' on page - '" + $('title').text().replace(' - NOT FOR COMMERCIAL USE', '') + "'");
            }).catch(function (error) {
                notification.Error(error);
            });
    }

    trackingVideoBlock(e) {
        let data = {
            blockId: $(e.currentTarget).attr('blockId'),
            blockName: $(e.currentTarget).attr('name'),
            pageName: $('title').text().replace(' - NOT FOR COMMERCIAL USE', ''),
            __RequestVerificationToken: token
        };

        axios.post('/publicapi/TrackVideoBlock', convertFormData(data))
            .then(function (result) {
                console.log("Video Block viewed: '" + $(e.currentTarget).attr('name') + "' on page - '" + $('title').text().replace(' - NOT FOR COMMERCIAL USE', '') + "'");
            }).catch(function (error) {
                notification.Error(error);
            });
    }
}
class Blog {
    init() {
        var inst = this;
        $(document).on("click", ".get-blog-comment", this.getBlogComment);

        $('.jsPaginateBlog').each(function (i, e) {
            $(e).click(function () {
                var data = $(this).attr('data');
                inst.changeBlogListPage(data);
            })
        })

        $('.jsPageSizeBlog').each(function (i, e) {
            $(e).click(function () {
                var data = $(this).attr('data');
                inst.changeBlogListPageSize(data);
            })
        })

        inst.loadMore();
    }

    getBlogComment(e) {
        e.preventDefault();
        var page = $(e.target).attr("pageIndex");
        this.changePageComment(page);
        return false;
    }

    changePageComment(page) {
        var form = $(document).find('.jsBlogPagingForm');
        $('#PageNumber').val(page);
        axios({
            method: 'post',
            url: "/BlogCommentBlock/GetComment",
            data: form.serialize()
        }).then(function (response) {
            $('#blogCommentBlock').replaceWith($(response).find('#blogCommentBlock'));
        }).catch(function (response) {
            console.log(response);
        });
    }

    changeBlogListPageSize(pageSize) {
        var form = $(document).find('.jsGetBlogItemListPage');
        $('#PageSize').val(pageSize);
        this.getBlogList();
    }

    changeBlogListPage(page) {
        var form = $(document).find('#jsGetBlogItemListPage');
        $('#PageNumber').val(page);
        this.getBlogList();
    }

    loadMore() {
        var inst = this;
        $('.jsLoadMoreBlogs').click(function () {
            var pageNumber = $(this).attr('pageNumber');
            var pageCount = $(this).attr('pageCount');
            var newPageNumber = parseInt(pageNumber) + 1;
            var pageCountNum = parseInt(pageCount);
            if (newPageNumber > pageCountNum) {
                $(this).html('No more');
                $(this).attr("disabled", "disabled");
            } else {
                $('#PageNumber').val(newPageNumber);
                $(this).attr('pageNumber', newPageNumber);

                inst.getBlogList(function (response) {
                    $('.jsBlogListLoadMore').append($(response.data + " .jsBlogListLoadMore").html());
                });
            }
        })
    }

    getBlogList(callback) {
        var inst = this;
        var form = $(document).find('#jsGetBlogItemListPage');
        var url = form.find('#RequestUrl').val();
        if (url == undefined || url == "") {
            url = "/BlogListPage/GetItemList";
        }
        if (!callback) {
            callback = function (response) {
                $('#blog-list').html($(response.data));
                $("html, body").animate({ scrollTop: 0 }, "slow");
                feather.replace();
                inst.init();
            }
        }
        axios({
            method: 'post',
            url: url,
            data: form.serialize()
        })
            .then(callback)
            .catch(function (response) {
                console.log(response);
            });
    }

    toJson(form) {
        var o = {};
        var a = $(form).serializeArray();
        $.each(a, function () {
            if (o[this.name] !== undefined) {
                if (!o[this.name].push) {
                    o[this.name] = [o[this.name]];
                }
                o[this.name].push(this.value || '');
            } else {
                o[this.name] = this.value || '';
            }
        });
        return JSON.stringify(o);
    }
}
class Budget {
    constructor(container) {
        this.DivContainer = container != undefined ? container : document;
    }

    // Add new budget
    validateBudget(data) {
        var message = "";
        if (isNaN(parseFloat(data.amount)) || parseFloat(data.amount) == 0) {
            message += "<p>Allocated is invalid.</p>";
        }
        if (data.startDateTime == undefined || data.startDateTime == "") {
            message += "<p>StartDate is invalid.</p>";
        }

        if (data.finishDateTime == undefined || data.finishDateTime == "") {
            message += "<p>DueDate is invalid.</p>";
        }

        if (data.finishDateTime < data.startDateTime) {
            message += "<p>StartDate and DueDate are invalid.</p>";
        }
        return message;
    }

    SaveNewBudget() {
        var inst = this;
        $(this.DivContainer).find('.jsSaveBudget').each(function (i, e) {
            $(e).click(function () {
                var form = $(e).closest('form');

                var url = form[0].action;
                var model = new FormData();
                var data = new BudgetModel();
                data.amount = $(form).find('#amount').val();
                data.status = $(form).find('select[name="statusBudget"]').val();
                data.currency = $(form).find('select[name="currencyBudget"]').val();
                data.startDateTime = $(form).find('#startDate').val();
                data.finishDateTime = $(form).find('#endDate').val();
                data.userEmail = $(form).find('#userEmail').val();
                data.budgetId = $(this).data('budget-id');
                data.__RequestVerificationToken = $(form).find('input[name="__RequestVerificationToken"]').val();
                var error = inst.validateBudget(data);
                if (error != "") {
                    $(form).find('#BudgetWarningMessage').html(error);
                } else {
                    $(form).find('#BudgetWarningMessage').html("");
                    model = inst.convertFormData(data);
                    $('.loading-box').show();
                    axios.post(url, model)
                        .then(function (result) {
                            if (result.data.result == "true") {
                                notification.Success("Success");
                            } else {
                                notification.Error(result.data.result);
                            }
                        })
                        .catch(function (error) {
                            notification.Error(error);
                        })
                        .finally(function () {
                            $('.loading-box').hide();
                        });
                }
                
            });
        });
    }
    // End add new budget

    convertFormData(data) {
        var formData = new FormData();
        for (var key in data) {
            formData.append(key, data[key]);
        }
        return formData;
    }
}

class BudgetModel {
    constructor() {
        this.__RequestVerificationToken = "";
        this.amount = "";
        this.startDateTime = "";
        this.finishDateTime = "";
        this.status = "";
        this.currency = "";
        this.budgetId = "";
        this.userEmail = "";
    }
    
}
class Cart {

    changeInfoCart(result) {
        $('.largecart-Subtotal').html("$" + result.data.SubTotal.Amount);
        $('.largecart-TotalDiscount').html("$" + result.data.TotalDiscount.Amount);
        $('.largecart-TaxTotal').html("$" + result.data.TaxTotal.Amount);
        $('.largecart-ShippingTotal').html("$" + result.data.ShippingTotal.Amount);
        $('.largecart-Total').html("$" + result.data.Total.Amount);

        cartHelper.SetCartReload(result.data.CountItems);
    }

    removeItem(url, elementClick, typeCart) {
        var inst = this;
        var data = {
            Code: elementClick.attr('code'),
            ShipmentId: elementClick.attr('shipmentId'),
            RequestFrom: elementClick.attr('type')
        };

        axios.post(url, data)
            .then(function (result) {
                if (result.data.StatusCode == 0) {
                    notification.Error(result.data.Message);
                }
                else if (result.data.StatusCode == 1) {
                    if (typeCart == 'cart') {
                        $('.countItemCartHeader').each(function (i, el) {
                            $(el).html(result.data.CountItems);
                        });
                        $('.amountCartHeader').each(function (i, el) {
                            $(el).html("$" + result.data.SubTotal.Amount);
                        });
                    }

                    if (typeCart !== 'large-cart' && typeCart !== "shared-cart-large") {
                        elementClick.parents('.cart__row').first().remove();
                        if (typeCart == "cart") cartHelper.SetCartReload(result.data.CountItems);
                        else if (typeCart == "shared-cart") cartHelper.SetSharedCartReload(result.data.CountItems);
                        else cartHelper.SetWishlistReload(result.data.CountItems);

                    } else { // if large cart, large shared 
                        if (typeCart == "shared-cart-large") {
                            elementClick.parents('tr').first().remove();
                            cartHelper.SetSharedCartReload(result.data.CountItems);
                        } else {
                            elementClick.parents('.product-tile-list__item').first().remove();
                            inst.changeInfoCart(result);
                        }
                    }
                }
                else {
                    notification.Error(result.data.Message);
                }
            })
            .catch(function (error) {
                notification.Error(error);
            })
            .finally(function () {

            });
    }

    moveToWishlist(element) {
        var inst = this;
        $('.loading-box').show();
        var url = $(element).attr('url');
        var code = $(element).attr('code');
        axios.post(url, { Code: code })
            .then(function (result) {
                if (result.data.StatusCode === 1) {
                    inst.changeInfoCart(result);
                    element.parents('.product-tile-list__item').first().remove();

                    cartHelper.AddWishlist();
                    notification.Success(result.data.Message);
                } else {
                    notification.Warning(result.data.Message);
                }
            })
            .catch(function (error) {
                notification.Error(error);
            })
            .finally(function () {
                $('.loading-box').hide();
            });
    }

    changeVariant(url, data, elementChange) {
        var inst = this;
        axios.post(url, data)
            .then(function (result) {
                var container = $(elementChange).parents('.product-tile-list__item').first();
                $(container).html(result.data);
                inst.InitCartItems(container);
                feather.replace();
                var dropdown = new Dropdown(container);
                dropdown.Init();
                notification.Success("Success");
            })
            .catch(function (error) {
                notification.Error(error);
            })
            .finally(function () {

            });
    }

    changeQuantity(element) {
        var inst = this;
        var code = $(element).attr('code');
        var shipmentId = $(element).attr('shipmentId');
        var qty = $(element).val();
        var url = $(element).attr('url');
        var data = {
            Code: code,
            ShipmentId: shipmentId,
            Quantity: qty
        };
        $(element).attr('disabled', 'disabled');
        axios.post(url, data)
            .then(function (result) {
                switch (result.data.StatusCode) {
                    case 0:
                        $(element).siblings('.required').html(result.data.Message);
                        notification.Warning(result.data.Message);
                        break;
                    case -1:
                        notification.Error(result.data.Message);
                        break;
                    default:
                        notification.Success(result.data.Message);
                        inst.changeInfoCart(result);
                        var subtotal = parseFloat($(element).attr('unitPrice')) * qty;
                        $('.subtotal-' + code).html($(element).attr('currency') + subtotal);
                        $(element).parents('.product-tile-list__item').first().find('.currentVariantInfo').attr('quantity', qty);
                        break;
                }
            })
            .catch(function (error) {
                notification.Error(error);
            })
            .finally(function () {
                $(element).removeAttr('disabled');
            });
    }


    InitClearCart() {
        $('#clearCart').click(function () {
            if (confirm("Are you sure?")) {
                $('.loading-box').show();
                var url = $(this).attr('url');
                axios.post(url)
                    .then(function (result) {
                        notification.Success("Delete cart successfully.");
                        setTimeout(function () { window.location.href = result.data; }, 1000);
                    })
                    .catch(function (error) {
                        notification(error);
                    })
                    .finally(function () {
                        $('.loading-box').hide();
                    });
            }
        });
    }

    LoadMiniCartClick(urlLoadCart, clickSelector, reloadSelector) {
        var inst = this;
        $(clickSelector).click(function () {
            var isNeedReload = $(this).attr('reload');
            if (isNeedReload == 1) { // reload mini cart
                $(reloadSelector + " .loading-cart").show();
                axios.get(urlLoadCart, null)
                    .then(function (result) {
                        $(reloadSelector + " .cart-item-listing").html(result.data);
                        inst.InitRemoveItem(reloadSelector);
                        $(clickSelector).attr('reload', 0);
                    })
                    .catch(function (error) {
                        notification.error(error);
                    })
                    .finally(function () {
                        $(reloadSelector + " .loading-cart").hide();
                    });
            }
        });
    }

    InitLoadCarts() {
        var inst = this;
        $('.jsCartBtn').each(function (i, e) {
            var url = $(e).data("reloadurl");
            var container = $(e).data("cartcontainer");
            inst.LoadMiniCartClick(url, e, container);
        });
        $('.jsWishlistBtn').each(function (i, e) {
            var url = $(e).data("reloadurl");
            var container = $(e).data("cartcontainer");
            inst.LoadMiniCartClick(url, e, container);
        });
        $('.jsSharedCartBtn').each(function (i, e) {
            var url = $(e).data("reloadurl");
            var container = $(e).data("cartcontainer");
            inst.LoadMiniCartClick(url, e, container);
        });
    }


    InitChangeVariant(selector) {
        var inst = this;
        if (selector == undefined) {
            selector = document;
        }

        $(selector).find('.jsChangeSizeVariantLargeCart').each(function (i, e) {
            $(e).change(function () {
                var parent = $(e).parents('.product-tile-list__item').first();
                var variantInfo = $(parent).find('.currentVariantInfo').first();
                var data = {
                    Code: variantInfo.val(),
                    Size: variantInfo.attr('size'),
                    Quantity: variantInfo.attr('quantity'),
                    NewSize: $(e).val(),
                    ShipmentId: variantInfo.attr('shipmentId'),
                    RequestFrom: "changeSizeItem"
                };
                var url = variantInfo.attr('url');

                inst.changeVariant(url, data, e);
            });
        });
    }

    InitMoveToWishtlist(selector) {
        var inst = this;
        if (selector == undefined) {
            selector = document;
        }
        $(selector).find('.jsMoveToWishlist').each(function (i, e) {
            $(e).click(function () {
                inst.moveToWishlist($(e));
            });
        });
    }

    InitChangeQuantityItem(selector) {
        var inst = this;
        if (selector == undefined) {
            selector = document;
        }
        $(selector).find('.jsChangeQuantityCartItem').each(function (i, e) {
            $(e).change(function () {
                var valueInt = parseInt($(e).val());
                if (!isNaN(valueInt) && Number.isInteger(valueInt)) {
                    $(e).siblings('.required').html("");
                    if (valueInt > 0)
                        inst.changeQuantity($(e));
                    else {
                        if (confirm("Are you sure delete this item?")) {
                            var elementDelete = $(e).parents('.product-tile-list__item').first().find('.jsRemoveCartItem').first();
                            inst.removeItem('/defaultcart/RemoveCartItem', elementDelete, "large-cart");
                        }
                    }
                }
                else {
                    $(e).siblings('.required').html("This field must be a number.");
                }
            });
        });
    }


    InitRemoveItem(selector) {
        var inst = this;
        if (selector == undefined) {
            selector = document;
        }

        $(selector).find('.jsRemoveCartItem').each(function (i, e) {
            $(e).click(function () {
                if (confirm("Are you sure?")) {
                    var type = $(this).attr('type');
                    var url = "/defaultcart/RemoveCartItem";
                    //var typeCart = "#js-cart";
                    if (type === "wishlist") {
                        url = "/wishlist/RemoveWishlistItem";
                        //typeCart = "#js-wishlist";
                    }

                    if (type === "large-cart") {
                        url = "/defaultcart/RemoveCartItem";
                        //typeCart = "#cartItemsId";
                    }

                    if (type === "shared-cart") {
                        url = "/sharedcart/RemoveCartItem";
                        //typeCart = "#jsSharedCartContainer";
                    }

                    if (type === "shared-cart-large") {
                        url = "/sharedcart/RemoveCartItem";
                    }

                    inst.removeItem(url, $(this), type);
                }
            });
        });
    }

    InitCartItems(selector) {
        var inst = this;
        inst.InitRemoveItem(selector);
        inst.InitChangeQuantityItem(selector);
        inst.InitMoveToWishtlist(selector);
        inst.InitChangeVariant(selector);
    }
}


class CartHelper {
    SetCartReload(totalItem) {
        if (totalItem != undefined) {
            $('.jsCartBtn').each(function (i, e) {
                $(e).find('.icon-menu__badge').first().html(totalItem);
                $(e).attr('reload', 1);
            });
        }
    }

    SetWishlistReload(totalItem) {
        if (totalItem != undefined) {
            $('.jsWishlistBtn').each(function (i, e) {
                $(e).find('.icon-menu__badge').first().html(totalItem);
                $(e).attr('reload', 1);
            });
        }
    }

    SetSharedCartReload(totalItem) {
        if (totalItem != undefined) {
            $('.jsSharedCartBtn').each(function (i, e) {
                $(e).find('.icon-menu__badge').first().html(totalItem);
                $(e).attr('reload', 1);
            });
        }
    }

    AddWishlist() {
        var wishlistHeader = $('#js-wishlist').children('.icon-menu__badge').first();

        var newQty = parseInt(wishlistHeader.html()) + 1;
        this.SetWishlistReload(newQty);
    }

    SubtractWishlist() {
        var wishlistHeader = $('#js-wishlist').children('.icon-menu__badge').first();

        var newQty = parseInt(wishlistHeader.html()) + 1;
        this.SetWishlistReload(newQty);
    }
}
class Checkout {

    // Payment
    AddPaymentClick() {
        var inst = this;
        $('.jsAddPayment').click(function () {
            $('.loading-box').show();
            var url = $(this).attr('url');
            var checked = $('.jsChangePayment:checked');
            var methodId = checked.attr('methodId');
            var keyword = checked.attr('keyword');
            //var paymentTotal = $('input[name="OrderSummary.PaymentTotal"]').val();

            var additionVal = {
                PaymentMethodId: methodId,
                SystemKeyword: keyword
                //'OrderSummary.PaymentTotal': paymentTotal
            };

            var data = $('.jsCheckoutForm').serialize() + '&' + $.param(additionVal);

            axios.post(url, data)
                .then(function (result) {
                    if (result.status != 200) {
                        notification.Error(result);
                    } else {
                        $('#paymentBlock').html(result.data);
                        feather.replace();
                        inst.InitPayment();
                    }
                })
                .catch(function (error) {
                    if (error.response.status == 400) {
                        $("#giftcard-alert").html(error.response.statusText);
                        $("#giftcard-alert").removeClass("alert-info");
                        $("#giftcard-alert").addClass("alert-danger");
                    } else {
                        notification.Error(error);
                    }
                })
                .finally(function () {
                    $('.loading-box').hide();
                });
        });
    }

    removePayment(element) {
        var inst = this;
        $('.loading-box').show();
        var url = $(element).data('url');
        var methodId = $(element).data('method-id');
        var keyword = $(element).data('keyword');
        var paymentTotal = $(element).data('amount');
        var data = {
            PaymentMethodId: methodId,
            SystemKeyword: keyword,
            'OrderSummary.PaymentTotal': paymentTotal
        };

        axios.post(url, data)
            .then(function (result) {
                $('#paymentBlock').html(result.data);
                feather.replace();
                inst.InitPayment();
            })
            .catch(function (error) {
                notification.Error(error);
            })
            .finally(function () {
                $('.loading-box').hide();
            });
    }

    RemovePaymentClick() {
        var inst = this;
        $('.jsRemovePayment').each(function (i, e) {
            console.log(i, e);
            $(e).click(function () {
                console.log(i, e);
                inst.removePayment(e);
            });
        });
    }

    PaymentMethodChange() {
        var inst = this;
        $('.jsChangePayment').each(function (i, e) {
            $(e).change(function () {
                $('.jsPaymentMethod').siblings('.loading-box').first().show();
                var url = $(e).attr('url');
                var methodId = $(e).attr('methodid');
                var keyword = $(e).attr('keyword');
                var data = {
                    PaymentMethodId: methodId,
                    SystemKeyword: keyword
                };

                axios.post(url, data)
                    .then(function (result) {
                        $('.jsPaymentMethod').html(result.data);
                        feather.replace();
                        inst.CreditCardChange();
                    })
                    .catch(function (error) {
                        notification.Error(error);
                    })
                    .finally(function () {
                        $('.loading-box').hide();
                    });
            });
        });
    }

    CreditCardChange() {
        $('.jsSelectCreditCard').each(function (i, e) {
            $(e).change(function () {
                $('.selectCreditCardType').hide();
                var targetId = $(e).val();
                $(targetId).show();
            });
        });
    }

    InitPayment() {
        var inst = this;
        inst.AddPaymentClick();
        inst.RemovePaymentClick();
        inst.PaymentMethodChange();
        inst.CreditCardChange();
    }

    ///

    // Shipping Address
    FormShippingAddressChange() {
        $('.jsSingleAddress').each(function (i, e) {
            $(e).change(function () {
                var shippingRow = $(e).parents('.jsShippingAddressRow').first();
                var value = $(this).val();
                $('#AddressType').val(value);
                if (value == 0) {
                    shippingRow.find('.jsOldShippingAddressForm').hide();
                    shippingRow.find('.jsNewShippingAddressForm').show();
                } else {
                    shippingRow.find('.jsOldShippingAddressForm').show();
                    shippingRow.find('.jsNewShippingAddressForm').hide();
                }
                
            });
        });
    }
    ///////////////////


    // Billing Address
    FormBillingAddressChange() {
        $('.jsBillingAddress').each(function (i, e) {
            $(e).click(function () {
                var value = $(e).val();
                $('#AddressType').val(value);
                if (value == 0) {
                    $('#oldBillingAddressForm').hide();
                    $('#newBillingAddressForm').show();
                } else if (value == 1) {
                    $('#oldBillingAddressForm').show();
                    $('#newBillingAddressForm').hide();
                } else if (value == 2) {
                    $('#oldBillingAddressForm').hide();
                    $('#newBillingAddressForm').hide();
                }
            });
        });
    }
    //////////////////


    CheckoutAsGuestOrRegister() {
        $('.jsContinueCheckoutMethod').click(function () {
            var type = $('input[name="checkoutMethod"]:checked').val();
            if (type == 'register') {
                $('#js-profile-popover').css("visibility", "visible");
                $('#login-selector-signup-tab').click();
                return false;
            }
        });
    }

    // Coupon code handle 
    ApplyCouponCode() {
        var inst = this;
        $('.jsCouponCode').keypress(function (e) {
            if (e.keyCode == 13) {
                $('.jsAddCoupon').click();
                return false;
            }
        });

        $('.jsAddCoupon').click(function () {
            var e = this;
            var form = $(this).parents('.jsAddCouponContainer').first();
            var url = form.attr('action');
            var couponCode = form.find('.jsCouponCode').val();
            var data = convertFormData({ couponCode: couponCode });
            axios.post(url, data)
                .then(function (r) {
                    if (r.status == 200) {
                        $('.jsCouponLabel').removeClass('hidden');
                        if ($(e).hasClass('jsInCheckout')) {
                            $('.jsCouponListing').append(inst.couponTemplate(couponCode, "jsInCheckout"));
                        } else {
                            $('.jsCouponListing').append(inst.couponTemplate(couponCode, ""));
                        }

                        inst.RemoveCouponCode($('.jsRemoveCoupon[data-couponcode=' + couponCode + ']'));
                        $('.jsCouponReplaceHtml').html(r.data);
                        $('.jsOrderSummary').html($('.jsOrderSummaryInPayment').html());
                        feather.replace();
                        if ($(e).hasClass('jsInCheckout')) {
                            inst.InitPayment();
                        }
                        form.find('.jsCouponCode').val("");
                        $('.jsCouponErrorMess').hide();
                    } else {
                        $('.jsCouponErrorMess').show();
                    }
                })
                .catch(function (e) {
                    notification.Error(e);
                });
        });
    }

    RemoveCouponCode(selector) {
        var inst = this;
        if (selector) {
            inst.removeCoupon(selector);
        } else {
            $('.jsRemoveCoupon').each(function (i, e) {
                inst.removeCoupon(e);
            });
        }
    }

    removeCoupon(e) {
        var inst = this;
        $(e).click(function () {
            var element = $(this);
            var url = $('#jsRenoveCouponUrl').val();
            var couponCode = $(this).data('couponcode');
            var data = convertFormData({ couponCode: couponCode });
            axios.post(url, data)
                .then(function (r) {
                    element.remove();
                    var coupons = $('.jsCouponListing').find('.jsRemoveCoupon');
                    if (coupons.length == 0) {
                        $('.jsCouponLabel').addClass('hidden');
                    }
                    $('.jsCouponReplaceHtml').html(r.data);
                    $('.jsOrderSummary').html($('.jsOrderSummaryInPayment').html());
                    if ($(e).hasClass('jsInCheckout')) {
                        feather.replace();
                        inst.InitPayment();
                    }

                    $('.jsCouponErrorMess').hide();
                })
                .catch(function (e) {
                    notification.Error(e);
                });
        });
    }

    couponTemplate(couponCode, jsInCheckout) {
        return `<label class="filters-tag jsRemoveCoupon ${jsInCheckout}" data-couponcode="${couponCode}">
                    <span>${couponCode}</span>
                    <span class="filters-tag__remove"><i class="cursor-pointer" data-feather="x" width="12"></i></span>
                </label>`;
    }
    //////////////////

    // Change shipping method
    ChangeShippingMethod() {
        var inst = this;
        $('.jsShippingMethodContainer').each(function (i, e) {
            $(e).change(function () {
                var isInstorePickup = $(e).find('.jsChangeShipment:checked').attr('instorepickup');
                if (isInstorePickup == "True") {
                    $(e).parents('.jsShipmentRow').find('.jsShippingAddressRow').hide();
                } else {
                    $(e).parents('.jsShipmentRow').find('.jsShippingAddressRow').show();
                }

                var url = $(e).attr('url');
                var data = $('.jsCheckoutForm').serialize();
                $('.loading-box').show();
                axios.post(url, data)
                    .then(function (r) {
                        $('.jsCouponReplaceHtml').html(r.data);
                        $('.jsOrderSummary').html($('.jsOrderSummaryInPayment').html());
                        feather.replace();
                        inst.InitPayment();
                    })
                    .catch(function (e) {
                        notification.Error(e);
                    })
                    .finally(function () {
                        $('.loading-box').hide();
                    });
            });
        });
    }
    //////////////////

    // Change cart item
    ChangeCartItem() {
        var inst = this;
        $('.jsChangeQuantityItemCheckout').each(function (i, e) {
            $(e).change(function () {
                $('.loading-box').show();
                var quantity = $(e).val();
                var code = $(e).data('code');
                var url = $(e).data('url');
                var shipmentId = $(e).data('shipmentid');
                var data = {
                    code: code,
                    quantity: quantity,
                    shipmentId: shipmentId
                };
                axios.post(url, data)
                    .then(function (r) {
                        if (quantity == 0) {
                            var parent = $(e).parents('.jsShipmentRow');
                            $(e).parents('.jsCartItem').first().remove();

                            if (parent.find('.jsCartItem').length == 0) {
                                parent.remove();
                                window.location.href = window.location.href;
                            }
                        }

                        if (quantity > 1) {
                            let btn = $(e).parents('.jsCartItem').find('.jsSeparateHint');
                            btn.parent('div').removeClass('hidden');
                            btn.addClass('jsSeparateBtn');
                            inst.SeparateClick(btn);
                        } else {
                            let btn = $(e).parents('.jsCartItem').find('.jsSeparateHint');
                            btn.parent('div').addClass('hidden');
                            btn.removeClass('jsSeparateBtn');
                        }

                        $('.jsCouponReplaceHtml').html(r.data);
                        $('.jsOrderSummary').html($('.jsOrderSummaryInPayment').html());
                        cartHelper.SetCartReload($('.jsTotalQuantityCheckout').val());
                        feather.replace();
                        inst.InitPayment();
                    })
                    .catch(function (e) {
                        notification.Error(e);
                    })
                    .finally(function () {
                        $('.loading-box').hide();
                    });
            });
        });
    }
    //////////////////
    
    // Separate line item
    SeparateClick(selector) {
        if (selector) {
            $(selector).click(function () {
                $('.jsSelectShipment').each(function (j, s) {
                    $(s).show();
                });
                var code = $(selector).data('code');
                var shipmentid = $(selector).data('shipmentid');
                var qty = $(selector).parents('.jsCartItem').find('.jsChangeQuantityItemCheckout').val();
                var delivery = $(selector).data('delivery');
                var selectedstore = $(selector).data('selectedstore');
                $('#lineItemInfomation').data("code", code);
                $('#lineItemInfomation').data("shipmentid", shipmentid);
                $('#lineItemInfomation').data("qty", qty);
                $('#lineItemInfomation').data("delivery", delivery);
                $('#lineItemInfomation').data("selectedstore", selectedstore);

                $('.jsSelectShipment[data-shipmentid=' + shipmentid + ']').hide();
            });
        } else {
            $('.jsSeparateBtn').each(function (i, e) {
                $(e).click(function () {
                    $('.jsSelectShipment').each(function (j, s) {
                        $(s).show();
                    });

                    var code = $(e).data('code');
                    var shipmentid = $(e).data('shipmentid');
                    var qty = $(e).parents('.jsCartItem').find('.jsChangeQuantityItemCheckout').val();
                    var delivery = $(e).data('delivery');
                    var selectedstore = $(e).data('selectedstore');
                    $('#lineItemInfomation').data("code", code);
                    $('#lineItemInfomation').data("shipmentid", shipmentid);
                    $('#lineItemInfomation').data("qty", qty);
                    $('#lineItemInfomation').data("delivery", delivery);
                    $('#lineItemInfomation').data("selectedstore", selectedstore);

                    $('.jsSelectShipment[data-shipmentid=' + shipmentid + ']').hide();
                });
            });
        }
    }

    ConfirmSeparateItemClick() {
        $('.jsSelectShipment').each(function (i, e) {
            $(e).click(function () {
                $('.loading-box').show();
                var url = $('#lineItemInfomation').data('url');
                var code = $('#lineItemInfomation').data('code');
                var shipmentid = $('#lineItemInfomation').data('shipmentid');
                var qty = $('#lineItemInfomation').data('qty');
                var delivery = $('#lineItemInfomation').data('delivery');
                var selectedstore = $('#lineItemInfomation').data('selectedstore');
                var toShipmentId = $(e).data('shipmentid');
                var data = {
                    Code: code,
                    Quantity: qty,
                    ShipmentId: shipmentid,
                    ToShipmentId: toShipmentId,
                    DeliveryMethodId: delivery,
                    SelectedStore: selectedstore
                };

                axios.post(url, data)
                    .then(function (r) {
                        if (r.data.Status == true) {
                            window.location.href = r.data.RedirectUrl;
                        } else {
                            notification.Error(r.data.Message);
                        }
                    })
                    .catch(function (e) {
                        notification.Error(e);
                    })
                    .finally(function () {
                        $('.loading-box').hide();
                    });
            });
        });
    }

    SeparateInit() {
        this.SeparateClick();
        this.ConfirmSeparateItemClick();
    }
    /////////////////////


    // Change Address (Shipping and Billing)

    ChangeAddressClick() {
        $('.jsChangeAddress').each(function (i, e) {
            $(e).change(function () {
                $('.loading-box').show();
                var type = $(e).data('addresstype');
                if (type == "Billing") {

                } else {
                    var shipmentIndex = $(e).data('shipmentindex');
                }
                var addressId = $(e).find('input[type=radio]:checked').val();
                var useBillingAddressForShipmentInput = $('#UseBillingAddressForShipment');
                var useBillingAddressForShipment = false;
                if (useBillingAddressForShipmentInput.length > 0) {
                    useBillingAddressForShipment = useBillingAddressForShipmentInput.is(':checked');
                }
                var data = {
                    AddressId: addressId,
                    UseBillingAddressForShipment: useBillingAddressForShipment,
                    ShippingAddressIndex: shipmentIndex,
                    AddressType: type
                };
                var url = $(e).parents('.jsChangeAddressCard').data('urlchangeaddress');
                axios.post(url, data)
                    .then(function (r) {
                        if (r.data.Status == true) {

                        } else {
                            notification.Error(r.data.Message);
                        }
                    })
                    .catch(function (e) {
                        notification.Error(e);
                    })
                    .finally(function () {
                        $('.loading-box').hide();
                    });
            });
        });
    }

    AddNewAddress() {
        $('.jsSaveAddress').each(function (i, e) {
            $(e).click(function () {
                $('.loading-box').show();
                var form = $(e).parents('.jsFormNewAddress').first();
                var data = serializeObject(form);
                var formData = convertFormData(data);
                var url = form[0].action;
                var returnUrl = form.find('.jsAddressReturnUrl').val();
                formData.append("returnUrl", returnUrl);
                axios.post(url, formData)
                    .then(function (r) {
                        if (r.data.Status == false) {
                            form.find('.jsAddressError').html(r.data.Message);
                            form.find('.jsAddressError').addClass('error');
                        } else {
                            window.location.href = r.data.RedirectUrl;
                        }
                    })
                    .catch(function (e) {
                        notification.Error(e);
                        form.find('.jsAddressError').html(e);
                        form.find('.jsAddressError').addClass('error');
                    })
                    .finally(function () {
                        $('.loading-box').hide();
                    });
            });
        });
    }
    ////////////////////

    // show hide subscription
    ShowHideSubscription() {
        $('#IsUsePaymentPlan').change(function () {
            if ($(this).is(':checked')) {
                $('.jsSubscription').slideDown();
            } else {
                $('.jsSubscription').slideUp();
            }
        });
    }
    /////////////////////
}
class Dropdown {
    constructor(divId) {
        if (divId) {
            this.DivContainer = divId;
        } else {
            this.DivContainer = document;
        }
    }

    ExpandCollapse() {
        $(this.DivContainer).find('.dropdown').each(function (i, e) {
            $(e).children('.dropdown__selected').first().click(function () {
                var dropdown = $(this).siblings('.dropdown__group');
                if (dropdown.is(':visible')) {
                    dropdown.hide();
                } else {
                    dropdown.show();
                }
            });
        });
        $(document).on('click', function (e) {
            if (!($(e.target).parents('.dropdown').length > 0 || $(e.target).hasClass('.dropdown'))) {
                $('.dropdown__group').hide();
            }
        });
    }

    ShowSelected(e) {
        var selectedText = "";
        $(e).find('input:checked').each(function (j, s) {
            selectedText += $(s).parents('label').text() + ", ";
        });
        selectedText = selectedText.substr(0, selectedText.lastIndexOf(","));
        if (selectedText == "") selectedText = "Click to expand";
        $(e).find('.dropdown__selected .current').first().html(selectedText);
    }

    InitShowSelectedText() {
        var inst = this;
        $(this.DivContainer).find('.dropdown').each(function (i, e) {
            inst.ShowSelected(e);
        });
    }

    SelectItem() {
        var inst = this;
        $(this.DivContainer).find('.dropdown').each(function (i, e) {
            $(e).find('input').each(function (j, s) {
                $(s).change(function () {
                    inst.ShowSelected(e);
                    $('.dropdown__group').hide();
                });
            });
        });
    }

    CustomizeDropdownMenu() {
        // Prevent Bootstrap dropdown from closing when clicking inside it
        $('.dropdown-menu.dropdown-menu--customized').on('click', (e) => {
            e.stopPropagation();
        });

        // Enable Bootstrap tabs which are inside Bootstrap dropdown clickable 
        $('.dropdown-menu--customized > ul > li > a').on('click', function (event) {
            event.stopPropagation();
            $(this).tab('show');
        });
    }

    Init() {
        this.ExpandCollapse();
        this.InitShowSelectedText();
        this.SelectItem();
        this.CustomizeDropdownMenu();
    }
}
class FoundationCms {
    init() {
        axios.defaults.headers.common['Accept'] = '*/*';
        window.notification = new NotifyHelper();
        feather.replace();

        var header = new Header();
        header.init();

        // Mobile Navgition
        var params = { searchBoxId: "#mobile-searchbox", openSearchBoxId: "#open-searh-box", closeSearchBoxId: "#close-search-box", sideBarId: "#offside-menu-mobile", openSideBarId: "#open-offside-menu" }
        var mobileNav = new MobileNavigation(params);
        mobileNav.Init();
        //--- End

        // Selection CM
        var selection = new Selection();
        selection.Init();
        // ---End

        // Dropdown
        var dropdowns = new Dropdown();
        dropdowns.Init();
        // --- End

        //Search Box
        var searchBox = new SearchBox();
        searchBox.Init();
        // --- End

        // Blog
        var blog = new Blog();
        blog.init();
        // --- End

        //Content Search
        var contentSearch = new ContentSearch();
        contentSearch.Init();
        // --- End

        // Pdf preview
        var pdfPreview = new PdfPreview();
        pdfPreview.Render();
        // --- End
    }
}
class FoundationCmsPersonalization {
    init() {

        var tracking = new BlockTracking();
        tracking.init();
    }
}
class FoundationCommerce {
    init() {
        window.cartHelper = new CartHelper();

        // Search & Product List
        var search = new ProductSearch();
        search.Init();

        var newProductsSearch = new NewProductsSearch();
        newProductsSearch.Init();

        var salesSearch = new SalesSearch();
        salesSearch.Init();
        // --- End

        // Product
        var product = new Product();
        product.Init();

        var productDetail = new ProductDetail('.product-detail');
        productDetail.InitProductDetail();
        // --- End

        // Quick View
        var quickView = new ProductDetail('#quickView');
        quickView.InitQuickView();
        // --- End

        // Review
        var review = new Review();
        review.RatingHover();
        review.RatingClick();
        review.SubmitReview();
        // --- End

        // Cart
        var cart = new Cart();
        cart.InitLoadCarts();
        cart.InitRemoveItem();
        cart.InitClearCart();
        cart.InitMoveToWishtlist();
        cart.InitChangeQuantityItem();
        cart.InitChangeVariant();
        // --- End

        // My Profile
        var myProfile = new MyProfile();
        myProfile.EditProfileClick();
        myProfile.SaveProfileClick();
        // --- End

        // Checkout
        var checkout = new Checkout();
        checkout.FormShippingAddressChange();
        checkout.FormBillingAddressChange();
        checkout.AddPaymentClick();
        checkout.RemovePaymentClick();
        checkout.PaymentMethodChange();
        checkout.CreditCardChange();
        checkout.CheckoutAsGuestOrRegister();
        checkout.ApplyCouponCode();
        checkout.RemoveCouponCode();
        checkout.ChangeShippingMethod();
        checkout.ChangeCartItem();
        checkout.SeparateInit();
        checkout.ChangeAddressClick();
        checkout.AddNewAddress();
        checkout.ShowHideSubscription();
        // --- End

        // Order Detail
        var orderDetai = new OrderDetail();
        orderDetai.InitNote();
        orderDetai.InitReturnOrder();
        // --- End


        // order pad
        var firstTable = new OrderPadsComponent('#firstTable');

        // B2B Budget
        var budget = new Budget();
        budget.SaveNewBudget();
        // --- End

        // B2B Organization
        var organization = new Organization();
        organization.init();
        // --- End

        // Quick Order Block
        $('.jsQuickOrderBlockForm').each(function (i, e) {
            let newBlockId = 'jsQuickOrderBlockForm' + i;
            $(e).attr('id', newBlockId);
            let quickOrderBlock = new QuickOrderBlock('#' + newBlockId);
            quickOrderBlock.Init();
        })
        // --- End

        // Address
        var address = new Address();
        address.Init();
        // --- End

        // B2B Order
        var b2bOrder = new B2BOrder();
        b2bOrder.Init();
        // --- End

        // Order Search Block
        var orderSearchBlock = new OrderSearchBlock();
        orderSearchBlock.Init();
        // --- End


        // B2B Users
        var b2bUsers = new UsersOrganization();
        b2bUsers.Init();
        // --- End
    }
}
$(document).ready(function () {

    // convert json to formdata and append __RequestVerificationToken key for CORS
    window.convertFormData = function (data, containerToken) {
        var formData = new FormData();
        var isAddedToken = false;
        for (var key in data) {
            if (key == "__RequestVerificationToken") {
                isAddedToken = true;
            }
            formData.append(key, data[key]);
        }

        if (!isAddedToken) {
            if (containerToken) {
                formData.append("__RequestVerificationToken", $(containerToken + ' input[name=__RequestVerificationToken]').val());
            } else {
                formData.append("__RequestVerificationToken", $('input[name=__RequestVerificationToken]').val());
            }
        }

        return formData;
    };

    window.serializeObject = function (form) {
        var datas = $(form).serializeArray();
        var jsonData = {};
        for (var d in datas) {
            jsonData[datas[d].name] = datas[d].value;
        }

        return jsonData;
    }

    var cms = new FoundationCms();
    cms.init();

    var commerce = new FoundationCommerce();
    commerce.init();

    var cmsPersonalization = new FoundationCmsPersonalization();
    cmsPersonalization.init();
});
class Header {
    constructor() {
        this.Popovers = [];
    }

    init() {
        var inst = this;
        $('.js-popover').each($.proxy(function (index, value) {
            const referenceId = $(value).attr('id');
            let options = {};

            if (referenceId === 'js-wishlist') {
                options = {
                    offset: {
                        offset: '242px, 2px'
                    }
                };
            } else if (referenceId === 'js-cart') {
                options = {
                    offset: {
                        offset: '162px, 2px'
                    }
                };
            }
        }, this));

        $(document)
            .on('click', '#jsBookmarkToggle', this.bookmark)
            .on('click', '.jsRemoveBookmark', this.removeBookmark)
            .on("change", ".jsChangeCountry", this.setRegion);

        $('.jsUsersSigninBtn').each(function (i, e) {
            $(e).click(function (event) {
                event.preventDefault();
                inst.signin($(this));
            });
        });
        $('.jsUsersSignupBtn').each(function (i, e) {
            $(e).click(function (event) {
                event.preventDefault();
                inst.signup($(this));
            });
        });
        this.megaMenu();
        this.setMarket();
    }

    bookmark(e) {
        e.preventDefault();
        if ($('#jsBookmarkToggle').attr('bookmarked') === undefined) {
            axios({
                method: 'post',
                url: "/Bookmarks/Bookmark",
                data: {
                    contentId: $('#jsBookmarkToggle').attr('contentid')
                }
            }).then(function (response) {
                $('#jsBookmarkToggle').attr('bookmarked', true);
                $('#jsBookmarkToggle').html(`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="black" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-bookmark" style="fill: black;">
                                                        <path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"></path>
                                                    </svg>`);
            }).catch(function (response) {
                console.log(response);
            });
        } else {
            axios({
                method: 'post',
                url: "/Bookmarks/Unbookmark",
                data: {
                    contentId: $('#jsBookmarkToggle').attr('contentid')
                }
            }).then(function (response) {
                $('#jsBookmarkToggle').removeAttr('bookmarked');
                $('#jsBookmarkToggle').html(`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-bookmark" style="fill: none;">
                                                        <path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"></path>
                                                    </svg>`);
            }).catch(function (response) {
                console.log(response);
            });
        }
    }

    removeBookmark(e) {
        e.preventDefault();
        var contentGuid = e.currentTarget.attributes["contentguid"].value;
        axios({
            method: 'post',
            url: "/Bookmarks/Remove",
            data: {
                contentGuid: contentGuid
            }
        }).then(function (response) {
            var rowId = '#bookmark-' + contentGuid;
            $(rowId).remove();
        }).catch(function (response) {
            console.log(response);
        });
    }


    megaMenu() {
        $('.navigation__left .navigation__item').each(function (i, e) {
            $(e).mouseenter(function () {
                var dropdown = $(e).find('.mega-container').first();
                var top = $(e)[0].getBoundingClientRect();
                $(dropdown).css('top', top.bottom + 1 + 'px');
                $(dropdown).css('left', '0px');
            })
        });
    }

    signin(e) {
        let form = $(e).closest("form");
        let bodyFormData = new FormData();
        bodyFormData.set('Email', $("#LoginViewModel_Email", form).val());
        bodyFormData.set('Password', $("#LoginViewModel_Password", form).val());
        bodyFormData.set('RememberMe', $("#LoginViewModel_RememberMe", form).is(':checked'));
        bodyFormData.set('ReturnUrl', $("#LoginViewModel_ReturnUrl", form).val());
        bodyFormData.set('__RequestVerificationToken', $("input[name=__RequestVerificationToken]", form).val());
        $('.loading-box').show();
        axios({
            method: 'post',
            url: form[0].action,
            data: bodyFormData,
            config: { headers: { 'Content-Type': 'multipart/form-data' } }
        })
            .then(function (response) {
                if (response.data.success == false) {
                    var errorMessage = document.getElementById('login-signin-errormessage');
                    if (errorMessage) {
                        errorMessage.innerText = '';
                        errorMessage.style.display = "block";
                        for (var error in response.data.errors) {
                            $('#login-signin-errormessage').append(response.data.errors[error] + '<br />');
                        }
                    }
                }
                else {
                    if (response.data.returnUrl) {
                        window.location.href = response.data.returnUrl;
                    } else {
                        window.location.href = "/";
                    }
                }
            })
            .catch(function (response) {
                document.getElementById('login-signin-errormessage').innerText = response;
            })
            .finally(function () {
                $('.loading-box').hide();
            });
    }

    convertToJsonObject(arrayData) {
        var indexed_array = {};

        $.map(arrayData, function (n, i) {
            indexed_array[n['name']] = n['value'];
        });

        return indexed_array;
    }

    signup(e) {
        let form = $(e).closest("form")[0];
        let bodyFormData = new FormData();
        bodyFormData.set('Address.Name', $("#RegisterAccountViewModel_Address_Name", form).val());
        bodyFormData.set('Email', $("#RegisterAccountViewModel_Email", form).val());
        bodyFormData.set('Password', $("#RegisterAccountViewModel_Password", form).val());
        bodyFormData.set('Password2', $("#RegisterAccountViewModel_Password2", form).val());
        bodyFormData.set('Address.FirstName', $("#RegisterAccountViewModel_Address_FirstName", form).val());
        bodyFormData.set('Address.LastName', $("#RegisterAccountViewModel_Address_LastName", form).val());
        bodyFormData.set('Address.Line1', $("#RegisterAccountViewModel_Address_Line1", form).val());
        bodyFormData.set('Address.Line2', $("#RegisterAccountViewModel_Address_Line2", form).val());
        bodyFormData.set('Address.City', $("#RegisterAccountViewModel_Address_City", form).val());
        bodyFormData.set('Address.PostalCode', $("#RegisterAccountViewModel_Address_PostalCode", form).val());
        bodyFormData.set('Address.CountryCode', $('select[name="RegisterAccountViewModel.Address.CountryCode"]', form).val());
        bodyFormData.set('Newsletter', $('#RegisterAccountViewModel_Newsletter', form).is(':checked'));

        if ($('select[name="RegisterAccountViewModel.Address.CountryRegion.Region"]', form).val()) {
            bodyFormData.set('Address.CountryRegion.Region', $('select[name="RegisterAccountViewModel.Address.CountryRegion.Region"]', form).val());
        } else {
            bodyFormData.set('Address.CountryRegion.Region', $('input[name="RegisterAccountViewModel.Address.CountryRegion.Region"]', form).val());
        }
        
        bodyFormData.set('__RequestVerificationToken', $("input[name=__RequestVerificationToken]", form).val());

        $('.loading-box').show();
        axios({
            method: 'post',
            url: form.action,
            data: bodyFormData,
            config: { headers: { 'Content-Type': 'multipart/form-data' } }
        })
            .then(function (response) {
                if (response.data) {
                    var errorMessage = document.getElementById('login-signup-errormessage');
                    if (errorMessage) {
                        errorMessage.innerText = '';
                        errorMessage.style.display = "block";
                        for (var error in response.data.errors) {
                            $('#login-signup-errormessage').append(response.data.errors[error] + '<br />');
                        }
                    }
                }
                else {
                    window.location.href = '/';
                }
            })
            .catch(function (response) {
                var errorPanel = document.getElementById('login-signup-errormessage');
                errorPanel.innerText = response;
                errorPanel.style.display = "block";
            })
            .finally(function () {
                $('.loading-box').hide();
            });
    }

    setRegion() {
        var $countryCode = $(this).val();
        var $addressRegionContainer = $(".address-region");
        var $region = $(".address-region-input", $addressRegionContainer).val();
        var $htmlPrefix = $("input[name='address-htmlfieldprefix']", $(this).parent()).val();
        var $url = "/AddressBook/GetRegionsForCountry/";
        axios.post($url, { countryCode: $countryCode, region: $region, htmlPrefix: $htmlPrefix })
            .then(function (response) {
                $addressRegionContainer.replaceWith($(result));
            })
            .catch(function (error) {
                console.log(error);
            });
    }

    setMarket() {
        $('.jsSelectMarket').each(function (i, e) {
            $(e).click(function () {
                var form = $(this).closest('form');
                var url = form.attr('action');
                var method = form.attr('method');
                let bodyFormData = new FormData();
                bodyFormData.set('__RequestVerificationToken', $("input[name=__RequestVerificationToken]", form).val());

                axios({
                    url: url,
                    method: method,
                    data: bodyFormData
                })
                    .then(function (result) {
                        window.location.href = result.data.returnUrl;
                    }).catch(function (e) {
                        notification.Error(e);
                    });

                return false;
            });
        });
    }
}

class MobileNavigation {
    constructor(params) {
        this.SearchBoxId = params.searchBoxId;
        this.OpenSearchBoxId = params.openSearchBoxId;
        this.CloseSearchBoxId = params.closeSearchBoxId;
        this.OpenSideBarId = params.openSideBarId;
        this.SideBarId = params.sideBarId;
    }

    OpenSearchBox() {
        var inst = this;
        $(inst.OpenSearchBoxId).click(function () {
            $(inst.SearchBoxId).fadeIn();
            $(inst.CloseSearchBoxId).fadeIn();
            $(inst.OpenSearchBoxId).hide();
        })
    }

    CloseSearchBox() {
        var inst = this;
        $(inst.CloseSearchBoxId).click(function () {
            $(inst.SearchBoxId).fadeOut();
            $(inst.CloseSearchBoxId).hide();
            $(inst.OpenSearchBoxId).show();
        })
    }

    OpenOffSideNavigation() {
        var inst = this;
        $(inst.OpenSideBarId).click(function () {
            var cart = $(inst.SideBarId).find('.jsCartBtn').first();
            if (cart.hasClass('active') && cart.attr('reload') == '1') {
                cart.click();
            }

            setTimeout(() => {
                $(inst.SideBarId).addClass('show-side-nav');
            }, 10);

            setTimeout(() => {
                $(inst.OpenSideBarId + " .hamburger-menu").removeClass('is-active');
            }, 500);
        });
    }

    CloseOffSideNavigation() {
        var inst = this;
        $('body').click(function (e) {
            if ($('.offside-navbar').is(':visible')) {
                if ($(e.target).parents('.offside-navbar').length == 0
                    && !$(e.target).hasClass('offside-navbar')
                    && (!$(e.target).hasClass('modal') && $(e.target).parents('.modal').length == 0)) {
                    if ($(inst.SideBarId).hasClass('show-side-nav')) {
                        if ($(e.target).parents(inst.SideBarId).length == 0) {
                            $(inst.SideBarId).addClass('hide-side-nav');
                            setTimeout(() => {
                                $(inst.SideBarId).removeClass('show-side-nav');
                                $(inst.SideBarId).removeClass('hide-side-nav');
                            }, 500);
                        }
                    }
                }
            }
        });
    }

    ExpandCollapseMenu() {
        $('.offside-navbar--menu__item .expand-collapse-child').each(function (i, e) {
            $(e).click(function () {
                $(e).addClass('hidden');
                if ($(e).hasClass('expanded')) {
                    $(e).siblings('.collapsed').removeClass('hidden');
                    $(e).siblings('.child-menu').show();
                    $(e).parents('.offside-navbar--menu__item').first().addClass('expanded');
                } else {
                    $(e).siblings('.expanded').removeClass('hidden');
                    $(e).siblings('.child-menu').hide();
                    $(e).parents('.offside-navbar--menu__item').first().removeClass('expanded');
                }
            })
        })
    }

    OpenCartClick() {
        var inst = this;
        $('.jsOpenCartMobile').each(function (i, e) {
            $(e).click(function () {
                $(inst.OpenSideBarId).click();
                $(inst.SideBarId).find('.jsCartBtn').first().click();
            })
        })
    }


    Init() {
        var menus = $(this.SideBarId).children('.offside-navbar--nav').first().children('.offside-navbar--nav__item');
        $(this.SideBarId).css('max-width', 81 * menus.length + "px");
        this.OpenSearchBox();
        this.CloseSearchBox();
        this.OpenOffSideNavigation();
        this.CloseOffSideNavigation();
        this.ExpandCollapseMenu();
        this.OpenCartClick();
    }
}

class MyProfile {

    saveProfile(options) {
        $('.loading-box').show();
        axios(options)
            .then(function (result) {
                $('.jsFirstName').html(result.data.FirstName);
                $('.jsLastName').html(result.data.LastName);
                notification.Success("Update profile successfully.");
            })
            .catch(function (error) {
                notification.Error(error);
            })
            .finally(function () {
                $('.loading-box').hide();
            })
    }

    EditProfileClick() {
        $('.jsEditProfile').each(function (i, e) {
            $(e).click(function () {
                var targetSelector = $(this).data('target');
                $(targetSelector).slideToggle();
            })
        })
    }


    SaveProfileClick() {
        var inst = this;
        $('.jsSaveProfile').click(function () {
            var container = $(this).parents('.jsProfileContainerEdit').first();
            var firstName = $(container).find('.jsProfileFirstNameEdit').first().val();
            var lastName = $(container).find('.jsProfileLastNameEdit').first().val();
            var birth = $(container).find('.jsProfileBirthDateEdit').first().val();
            var newsLetter = $(container).find('.jsProfileNewsLetterEdit').first().is(':checked');
            var token = $(container).find('.jsTokenProfileEdit').first().find('input').first().val();

            var data = new FormData();
            data.append("FirstName", firstName)
            data.append("LastName", lastName)
            data.append("DateOfBirth", birth)
            data.append("SubscribesToNewsletter", newsLetter)
            data.append("__RequestVerificationToken", token)

            var options = {
                method: 'post',
                headers: { 'content-type': 'application/x-www-form-urlencoded; charset=utf-8' },
                data: data,
                url: $(this).closest('form')[0].action
            }

            inst.saveProfile(options);
            $(this).parents('.jsProfileContainerEdit').first().fadeToggle();

            return false;
        })
    }
}
class NotifyHelper {
    Success(message, encodeMess) {
        var options = this.setOptions("success", encodeMess);
        $.notify(message, options);
    }

    Error(message, encodeMess) {
        var options = this.setOptions("error", encodeMess);
        $.notify(message, options);
    }

    Warning(message, encodeMess) {
        var options = this.setOptions("warning", encodeMess);
        $.notify(message, options);
    }

    Info(message, encodeMess) {
        var options = this.setOptions("info", encodeMess);
        $.notify(message, options);
    }

    setOptions(className, encodeMess) {
        var options = {
            className: className
        }

        if (encodeMess != undefined) {
            options.encodeMess = encodeMess;
        } else {
            options.encodeMess = true;
        }

        return options;
    }
}
class OrderDetail {
    constructor(divContainer) {
        this.DivContainer = divContainer == undefined ? document : divContainer;
        this.NoteTemplate = `<div class="order-detail__note-block">
            <p class="title">@title</p>
            <p class="sub-title">Type: @type</p>
            <p>@detail</p>
        </div>`;


    }
    // Notes 
    SaveNoteClick() {
        var inst = this;
        $(this.DivContainer).find('.jsAddNote').each(function (i, e) {
            $(e).click(function () {
                $('.loading-box').show();
                var form = $(this).closest('form');
                var url = form[0].action;
                var data = form.serialize();
                axios.post(url, data)
                    .then(function (result) {
                        var newNote = inst.NoteTemplate.replace("@title", result.data.Title).replace("@type", result.data.Type).replace("@detail", result.data.Detail);
                        $('#noteListing').append(newNote);
                        form[0].reset();
                    })
                    .catch(function (error) {
                        notification.Error(error);
                    })
                    .finally(function () {
                        $('.loading-box').hide();
                    });

                return false;
            });
        });
    }

    InitNote() {
        this.SaveNoteClick();
    }
    // --- End


    // Return Order
    ReturnItemClick() {
        $(this.DivContainer).find('.jsReturnLineItem').each(function (i, e) {
            $(e).click(function () {
                var modal = $('#returnSettingModal');
                var btnSubmitModal = modal.find('#btnSubmitReturnOrder');

                $(btnSubmitModal).attr("data-order-link", $(this).data('order-link'));
                $(btnSubmitModal).attr("data-shipment-link", $(this).data('shipment-link'));
                $(btnSubmitModal).attr("data-lineItem-link", $(this).data('lineitem-link'));
                $(btnSubmitModal).attr("data-total-return", $(this).data('total-return'));

                var txtQuantity = modal.find('input[id="txtQuantity"]');
                $(txtQuantity).val(parseInt($(this).data('total-return')));
            });
        });
    }


    SubmitReturnItemClick() {
        $(this.DivContainer).find('.jsCreateReturn').each(function (i, e) {
            $(e).click(function () {
                $('.loading-box').show();
                var form = $(this).closest('form');
                var url = form[0].action;
                var data = new FormData();
                var itemId = $(this).data('lineitem-link');
                data.append("orderGroupId", $(this).data('order-link'));
                data.append("shipmentId", $(this).data('shipment-link'));
                data.append("lineItemId", $(this).data('lineitem-link'));
                data.append("returnQuantity", $(this).data('total-return'));
                data.append("reason", $("#optReason option:selected").text());
                data.append("__RequestVerificationToken", form.find('input[name="__RequestVerificationToken"]').first().val());
                //{
                //    orderGroupId: $(this).data('order-link'),
                //    shipmentId: $(this).data('shipment-link'),
                //    lineItemId: $(this).data('lineitem-link'),
                //    returnQuantity: $(this).data('total-return'),
                //    reason: $("#optReason option:selected").text(),
                //    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val(),
                //}
                axios.post(url, data)
                    .then(function (result) {
                        notification.Success('Success');
                        $('#returnSettingModal').modal('hide');
                        $('#return-' + itemId).prop('disabled', true);
                    })
                    .catch(function (error) {
                        notification.Error(error);
                    })
                    .finally(function () {
                        $('.loading-box').hide();
                    });
            });
        });
    }

    InitReturnOrder() {
        this.ReturnItemClick();
        this.SubmitReturnItemClick();
    }
    // --- End
}
var OrderPadsComponent = function(table) {

    var minusIcon = '<line x1="5" y1="12" x2="19" y2="12"></line>';
    var plusIcon = '<line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line>';

    var $table,
        $firstRows,
        $secondRows,
        $thirdRows,
        $expandFirstRowsBtn,
        $expandSecondRowsBtn;

    function expandUserRows(e) {
        e.preventDefault();
        var $this = $(this);
        var $thisIcon = $this.find('svg');
        var dataToExpandClassForUsers = $this.attr('data-expand');
        var $usersRows = $firstRows.siblings('.' + dataToExpandClassForUsers);

        if ($this.hasClass('js-second-row-collapsed')) {
            $thisIcon.addClass('feather-minus').removeClass('feather-plus');
            $thisIcon.html(minusIcon);
            $usersRows.addClass('tr-show');
            $this.removeClass('js-second-row-collapsed');
        }
        else {
            $usersRows.each(function () {

                var $this = $(this);
                var $btn = $this.find('.btn-xs');
                var $icon = $btn.find('svg');
                var dataToExpandClassForProducts = $btn.attr('data-expand');

                if (!$btn.hasClass('js-third-row-collapsed')) {
                    $firstRows.siblings('.' + dataToExpandClassForProducts).removeClass('tr-show');
                    $btn.addClass('js-third-row-collapsed');
                    $icon.addClass('feather-plus').removeClass('feather-minus');
                    $icon.html(plusIcon);
                }

                $this.removeClass('tr-show');
            });
            $thisIcon.addClass('feather-plus').removeClass('feather-minus');
            $thisIcon.html(plusIcon);
            $this.addClass('js-second-row-collapsed');
        }
    }

    function expandProductRows(e) {
        e.preventDefault();
        var $this = $(this);
        var $thisIcon = $this.find('svg');
        var dataToExpandClassForProducts = $this.attr('data-expand');

        if ($this.hasClass('js-third-row-collapsed')) {
            $this.removeClass('js-third-row-collapsed');
            $thisIcon.addClass('feather-minus').removeClass('feather-plus');
            $thisIcon.html(minusIcon);
            $firstRows.siblings('.' + dataToExpandClassForProducts).addClass('tr-show');
        }
        else {
            $thisIcon.addClass('feather-plus').removeClass('feather-minus');
            $thisIcon.html(plusIcon);
            $firstRows.siblings('.' + dataToExpandClassForProducts).removeClass('tr-show');
            $this.addClass('js-third-row-collapsed');
        }
    }

    function bindEvents() {
        $expandFirstRowsBtn.click(expandUserRows);

        if ($thirdRows.length > 0) {
            $expandSecondRowsBtn.click(expandProductRows);
        }
    }

    function init() {
        var firstRow = '.first-row';
        var secondRow = '.second-row';
        var thirdRow ='.third-row';

        $table = $(table);
        $firstRows = $(firstRow, $table); // $('.sub-organization-row');
        $secondRows = $(secondRow, $table); // $('.user-row');
        $thirdRows = $(thirdRow, $table); // $('.product-row');

        if ($table.length > 0) {
            if ($secondRows.length > 0) {
                $expandFirstRowsBtn = $firstRows.find('.btn-xs');

                if ($thirdRows.length > 0)
                    $expandSecondRowsBtn = $secondRows.find('.btn-xs');

                bindEvents();
            }
        }
    }

    init();
};

class OrderSearchBlock {

    ShowHideAdvancedFilter() {
        $('.jsAdvancedBtn').each(function (i, e) {
            $(e).click(function () {
                var container = $(e).parents('.jsOrderSearchFilterContainer').first();
                var advanceBox = container.find('.jsAdvancedFilterBox');
                if (advanceBox.is(":visible")) {
                    advanceBox.slideUp();
                } else {
                    advanceBox.slideDown();
                }
            })
        })
    }

    FilterClick() {
        var inst = this;
        $('.jsFilterOrderSearchBtn').each(function (i, e) {
            $(e).click(function () {
                $('.loading-box').show();
                var container = $(e).parents('.jsOrderSearchFilterContainer').first();
                var filterBox = container.find('.jsAdvancedFilterBox').first();
                var formData = new FormData();
                var valid = true;

                if (filterBox.is(":visible")) {
                    valid = inst.Validate(filterBox);
                    var data = serializeObject(container);
                    formData = convertFormData(data);
                } else {
                    formData.append("Keyword", container.find('input[name=Keyword]').first().val());
                    formData.append("CurrentBlockId", container.find('input[name=CurrentBlockId]').first().val());
                }

                var url = container[0].action;
                if (valid) {
                    axios.post(url, formData)
                        .then(function (r) {
                            var table = container.siblings('.jsOrderSearchTable').first();
                            table.find('.jsOrderSearchTableBody').html(r.data);
                        })
                        .catch(function (e) {
                            notification.Error(e);
                        })
                        .finally(function () {
                            $('.loading-box').hide();
                        })
                } else {
                    $('.loading-box').hide();
                }
            })
        })
    }

    Validate(e) {
        var valid = true;
        var message = "";
        var dateFrom = $(e).find('input[name=DateFrom]').first().val();
        var dateTo = $(e).find('input[name=DateTo]').first().val();
        var priceFrom = $(e).find('input[name=PriceFrom]').first().val();
        var priceTo = $(e).find('input[name=PriceTo]').first().val();

        if (dateFrom != "" || dateTo != "") {
            var dateFromParse = Date.parse(dateFrom);
            var dateToParse = Date.parse(dateTo);
            if (dateFrom != "" && dateFromParse > Date.now()) {
                valid = false;
                message += "<p>DateFrom is invalid</p>";
            }

            if (dateTo != "" && dateToParse > Date.now()) {
                valid = false;
                message += "<p>DateTo is invalid</p>";
            }

            if (dateFrom != "" && dateTo != "" && dateFromParse > dateToParse) {
                valid = false;
                message += "<p>DateFrom can not greater than DateTo</p>";
            }
        }

        if (priceFrom != "" || priceTo != "") {
            var priceFromParse = parseInt(priceFrom);
            var priceToParse = parseInt(priceTo);

            if (priceFromParse < 0) {
                valid = false;
                message += "<p>PriceFrom is invalid</p>";
            }

            if (priceToParse < 0) {
                valid = false;
                message += "<p>PriceTo is invalid</p>";
            }

            if (priceFromParse > 0 && priceToParse > 0 && priceFromParse > priceToParse) {
                valid = false;
                message += "<p>PriceFrom can not greater than PriceTo</p>";
            }
        }

        if (valid) {
            $(e).find('.jsOrderSearchError').html("");
            $(e).find('.jsOrderSearchError').removeClass("error");
        } else {
            $(e).find('.jsOrderSearchError').html(message);
            $(e).find('.jsOrderSearchError').addClass("error");
        }

        return valid;
    }

    Init() {
        this.ShowHideAdvancedFilter();
        this.FilterClick();
    }
}
class Organization {
    init() {
        $(document).ready(function () {
            var $cloner = $('.js-cloner');

            $cloner.each(function () {
                $(this).click(function (e) {
                    var $this = $(this);

                    e.preventDefault();
                    var $rowToClone = $this.siblings('.location-row').last();
                    var $clone = $rowToClone.clone();
                    $clone.find('input').each(function () {
                        var $this = $(this);
                        //New Name
                        var nameAttr = $this.attr('name');
                        var arrNum = nameAttr.match(/\d+/);
                        var nr = arrNum ? arrNum[0] : 0;
                        var subStr = nameAttr.substring(0, nameAttr.indexOf(nr));
                        var endStr = nameAttr.substring(nameAttr.indexOf(nr) + 1, nameAttr.length);
                        var newName = subStr + (++nr) + endStr;
                        $this.attr('name', newName);
                        //New Id
                        var idAttr = $this.attr('id');
                        var idAttrNum = nameAttr.match(/\d+/);
                        var idNr = idAttrNum ? idAttrNum[0] : 0;
                        var subIdStr = idAttr.substring(0, idAttr.indexOf(idNr));
                        var endIdStr = idAttr.substring(idAttr.indexOf(idNr) + 1, idAttr.length);
                        var newId = subIdStr + (++idNr) + endIdStr;
                        $this.attr('id', newId);
                        $this.val('');

                        var validation = $this.siblings().last();
                        validation.attr('data-valmsg-for', newName);
                    });
                    $clone.insertBefore($this);
                });
            });

            $('#suborg-form').on('click', '.delete-address-icon', function (e) {
                e.preventDefault();

                var $deleteIcon = $(this);
                if ($('#suborg-form').find('.location-row').length > 1) {
                    var parent = $deleteIcon.closest('.location-row');
                    parent.hide();
                    parent.find('input[name*=Name]').val("removed");
                    parent.find('input[name*=Street]').val("0");
                    parent.find('input[name*=City]').val("0");
                    parent.find('input[name*=PostalCode]').val("0");
                    parent.find('input[name*=Country]').val("0");
                    parent.removeClass('location-row').addClass('location-row-removed');
                }
            });
        });
    }
}
class PdfPreview {
    Render() {
        $('.jsPdfPreview').each(function (i, e) {
            let url = $(e).attr('mediaUrl');
            let height = $(e).attr('height');
            PDFObject.embed(url, e, { height: height + "px" });
        })
    }
}
class Product {

    constructor(divId) {
        if (divId) {
            this.DivContainerID = divId;
        } else {
            this.DivContainerID = document;
        }
    }

    /// Product handler

    addToCart(data, url, callback, isAddToCart) {
        $('body>.loading-box').show();
        data.requestFrom = "axios";
        axios.post(url, data)
            .then(function (result) {
                if (result.data.StatusCode == 0) {
                    notification.Warning(result.data.Message);
                }
                if (result.data.StatusCode == 1) {
                    var checkoutLink = "";
                    var cartLink = "";
                    if ($('#checkoutBtnId')) {
                        checkoutLink = $('#checkoutBtnId').attr('href');
                    }

                    if ($('#cartBtnId')) {
                        cartLink = $('#cartBtnId').attr('href');
                    }

                    var message = result.data.Message;
                    if (isAddToCart) {
                        var bottomNotification = `\n<div style='display: flex; justify-content: space-between; margin-top: 15px;'>
                            <a href='`+ cartLink + `' class='btn-notification'>View Cart</a>
                            <a href='`+ checkoutLink + `' class='btn-notification'>Checkout</a>
                        </div>`;
                        message += bottomNotification;
                    }
                    
                    notification.Success(message, false);

                    if (callback) callback(result.data.CountItems);
                }
            })
            .catch(function (error) {
                notification.Error("Can not add the product to the cart.\n" + error.response.statusText);
            })
            .finally(function () {
                $('body>.loading-box').hide();
            });

        return false;
    }

    // use in Wishlist Page
    removeItem(data, url, message, callback) {
        var inst = this;
        $('body>.loading-box').show();
        axios.post(url, data)
            .then(function (result) {
                if (result.status == 200) {
                    notification.Success(message);
                    $('#my-wishlist').html(result.data);
                    var product = new Product('#my-wishlist');
                    product.Init();
                    var count = $('#countWishListInPage').val();
                    if (callback) callback(count);

                    feather.replace();
                }
                if (result.status == 204) {
                    notification.Error(result.statusText);
                }
            })
            .catch(function (error) {
                notification.Error(error);
            })
            .finally(function () {
                $('body>.loading-box').hide();
            });
    }

    callbackAddToCart(selector, count) {
        if (selector == ".jsCartBtn") { cartHelper.SetCartReload(count); }
        else if (selector == ".jsSharedCartBtn") { cartHelper.SetSharedCartReload(count)}
        else cartHelper.SetWishlistReload(count);
    }

    /// --- end


    AddToSharedCartClick() {
        var inst = this;
        $(this.DivContainerID).find('.addToSharedCart').each(function (i, e) {
            $(e).click(function () {
                var code = $(this).attr('data');

                var callback = (count) => {
                    inst.callbackAddToCart('.jsSharedCartBtn', count);
                };

                inst.addToCart({ Code: code }, '/SharedCart/AddToCart', callback);
            });
        });
    }

    AddToWishlistClick() {
        var inst = this;

        $(this.DivContainerID).find('.addToWishlist').each(function (i, e) {
            $(e).click(function () {
                var code = $(this).attr('data');

                var callback = (count) => {
                    inst.callbackAddToCart('#js-wishlist', count);
                };

                inst.addToCart({ Code: code }, '/Wishlist/AddToCart', callback);
            });
        });

    }

    AddToCartClick() {
        var inst = this;

        $(this.DivContainerID).find('.addToCart').each(function (i, e) {
            $(e).attr("href", "javascript:void(0);")
            $(e).click(function () {
                var code = $(this).attr('data');
                var data = {
                    Code: code
                };

                if ($(this).attr('qty')) data.Quantity = $(this).attr('qty');
                if ($(this).attr('store')) data.Store = $(this).attr('store');
                if ($(this).attr('selectedStore')) data.SelectedStore = $(this).attr('selectedStore');

                var callback = (count) => {
                    inst.callbackAddToCart('.jsCartBtn', count);
                };

                inst.addToCart(data, '/DefaultCart/AddToCart', callback, true);
            });
        });
    }

    DeleteWishlistClick() {
        var inst = this;

        $(this.DivContainerID).find('.deleteLineItemWishlist').each(function (i, e) {
            $(e).click(function () {
                if (confirm("Are you sure?")) {
                    var code = $(e).attr('data');
                    var data = { Code: code, Quantity: 0, RequestFrom: "axios" };
                    var callback = (count) => {
                        inst.callbackAddToCart("#js-wishlist", count);
                    };
                    inst.removeItem(data, '/Wishlist/ChangeCartItem', "Removed " + code + " from wishlist", callback);
                }
            });
        });
    }

    AddAllToCartClick() {
        $(this.DivContainerID).find('.jsAddAllToCart').each(function (i, e) {
            $(e).click(function () {
                $('.loading-box').show();
                var url = $(this).attr('url');
                axios.post(url)
                    .then(function (result) {
                        notification.Success(result.data.Message);
                        cartHelper.SetCartReload(result.data.CountItems);
                    })
                    .catch(function (error) {
                        notification.Error(error);
                    })
                    .finally(function () {
                        $('.loading-box').hide();
                    });

            });
        });
        
    }

    Init() {
        // Init product \
        this.AddToWishlistClick();
        this.AddToSharedCartClick();
        this.AddToCartClick();
        this.AddAllToCartClick();
        this.DeleteWishlistClick();
        //-- end
    }
}
class ProductDetail {
  constructor(divContainerId) {
    if (divContainerId) {
      this.DivContainerId = divContainerId;
    } else {
      this.DivContainerId = document;
    }
  }

  quickView(code, productCode, url) {
    var inst = this;
    $(inst.DivContainerId).find('.loading-box').show();
    axios.get(url, { params: { productCode: productCode, variantCode: code } })
      .then(function (result) {
        if (result.status == 200) {
          $('#quickView .modal-body').html(result.data);
          $('#quickView .modal-body').off();
          $(inst.DivContainerId).find("#productCode").val(productCode);
          feather.replace();
          var dropdown = new Dropdown("#quickView");
          dropdown.Init();
          var product = new Product('#quickView');
          product.AddToCartClick();
          product.AddToWishlistClick();
          product.AddToSharedCartClick();

          inst.InStorePickupClick();
          inst.SelectStoreClick();
          inst.SelectColorSizeClick();
          inst.ZoomImage();
        }
      })
      .catch(function (error) {
        notification.Error(error);
        $('#quickView .modal-body').html('');
      })
      .finally(function () {
        $(inst.DivContainerId).find('.loading-box').hide();
      });
  }

  changeVariant(data, callback) {
    var inst = this;
    $(inst.DivContainerId).find('.loading-box').show();
    axios.get('/product/selectVariant', { params: data })
      .then(function (result) {
        if (!callback) {
          if (result.status == 200) {
            $(inst.DivContainerId).find('.modal-body').html(result.data);
            $(inst.DivContainerId).find('.modal-body').off();
            //$(inst.DivContainerId).find("#productCode").val(productCode);
            var dropdown = new Dropdown(inst.DivContainerId);
            dropdown.Init();
            var product = new Product(inst.DivContainerId);
            product.AddToCartClick();
            product.AddToWishlistClick();

            inst.InStorePickupClick();
            inst.SelectStoreClick();
            inst.SelectColorSizeClick();
            feather.replace();
          }
        } else {
          callback(result);
          inst.SelectColorSizeClick(false, callback);
        }
      })
      .catch(function (error) {
        notification.Error(error);
        $('#quickView .modal-body').html('');
      })
      .finally(function () {
        $(inst.DivContainerId).find('.loading-box').hide();
      });
  }

  InStorePickupClick() {
    var inst = this;
    $(this.DivContainerId).find('.jsSelectDelivery').each(function (i, e) {
      $(e).click(function () {
        var valueChecked = $(this).find('input').first().val();
        $(inst.DivContainerId).find('.addToCart').attr('store', valueChecked);
        $(inst.DivContainerId).find('.jsBuyNow').attr('store', valueChecked);
        if (valueChecked === 'instore') {
          var selectedStore = $(inst.DivContainerId).find('#selectedStore').val();
          $(inst.DivContainerId).find('.addToCart').attr('selectedStore', selectedStore);
          $(inst.DivContainerId).find('.jsBuyNow').attr('selectedStore', selectedStore);
          if (!$(inst.DivContainerId).find('#pickupStoreBox').is(':visible')) {
            $(inst.DivContainerId).find('#pickupStoreBox').fadeToggle();
          }
        } else {
          $(inst.DivContainerId).find('.addToCart').attr('selectedStore', '');
          $(inst.DivContainerId).find('.jsBuyNow').attr('selectedStore', '');
          if ($(inst.DivContainerId).find('#pickupStoreBox').is(':visible')) {
            $(inst.DivContainerId).find('#pickupStoreBox').fadeOut(300);
          }
        }
      });
    });
  }

  SelectStoreClick() {
    var inst = this;
    $(this.DivContainerId).find('.jsSelectStore').each(function (i, e) {
      $(e).click(function () {
        var storeCode = $(this).attr('data');
        $(inst.DivContainerId).find('#selectedStore').val(storeCode);
        $(inst.DivContainerId).find('.selectedStoreIcon').each(function (j, s) {
          $(s).hide();
        });
        $(inst.DivContainerId).find('.jsSelectStore').each(function (j, s) {
          $(s).show();
        });

        $(this).hide();
        $(this).siblings('.selectedStoreIcon').show();

        $(inst.DivContainerId).find('.addToCart').attr('selectedStore', storeCode);
        $(inst.DivContainerId).find('.jsBuyNow').attr('selectedStore', storeCode);
      });
    });
  }

  SelectColorSizeClick(isQuickView, callback) {
    var inst = this;
    $(this.DivContainerId).find(".jsSelectColorSize").each(function (i, e) {
      $(e).change(function () {
        var color = $(inst.DivContainerId).find("select[name='color']").val();
        var size = $(inst.DivContainerId).find("select[name='size']").val();
        var productCode = $(inst.DivContainerId).find("#productCode").val();
        var data = { productCode: productCode, color: color, size: size, isQuickView: isQuickView };
        inst.changeVariant(data, callback);
      });
    });
  }

  ChangeQuantityKeyup() {
    $('#qty').change(function () {
      $('.addToCart').attr('qty', $(this).val());
      $('.jsBuyNow').attr('qty', $(this).val());
    });
  }

  ChangeImageClick() {
    $(this.DivContainerId).find('.jsProductImageSelect').each(function (i, e) {
      $(e).click(function () {
        var type = "Image";
        var mediaTag = $(this).find('img');
        if (!mediaTag.is(":visible")) {
          var type = "Video";
          mediaTag = $(this).find('video');
        }
        var urlImg = mediaTag.attr('src');
        if (type == "Image") {
          $('.jsProductImageShow').find('img').attr('src', urlImg);
          $('.jsProductImageShow').find('img').css("display", "inline");
          $('.jsProductImageShow').find('video').css("display", "none");
          $('.zoomImg').attr('src', urlImg);
        } else {
          $('.jsProductImageShow').find('video').attr('src', urlImg);
          $('.jsProductImageShow').find('img').css("display", "none");
          $('.jsProductImageShow').find('video').css("display", "inline");
        }
       
      });
    });
  }

  ZoomImage() {
    $(this.DivContainerId).find('.jsProductImageShow').each(function (i, e) {
      if ($(e).find('img').is(":visible")) {
        var urlImg = $(e).find('img').attr('src');
        $(e).siblings('div').first().children('div').first().zoom({
          url: urlImg,
          magnify: 1.5,
          onZoomIn: true,
          onZoomOut: true
        });
      }
      
    });
  }

  BuyNowClick() {
    $(this.DivContainerId).find('.jsBuyNow').each(function (i, e) {
      $(e).click(async function () {
        $('.loading-box').show();
        var code = $(this).attr('data');
        var data = {
          Code: code
        };

        if ($(this).attr('qty')) data.Quantity = $(this).attr('qty');
        if ($(this).attr('store')) data.Store = $(this).attr('store');
        if ($(this).attr('selectedStore')) data.SelectedStore = $(this).attr('selectedStore');
        var url = $(this).attr('url');

        try {
          const r = await axios.post(url, data);
          if (r.data.Message) {
            notification.Error(r.data.Message);
            setTimeout(function () {
              window.location.href = r.data.Redirect;
            }, 1000);
          } else {
            window.location.href = r.data.Redirect;
          }
        } catch (e) {
          notification.Error(e);
        } finally {
          $('.loading-box').hide();
        }
      })
    })
  }

  InitProductDetail() {
    var inst = this;
    this.InStorePickupClick();
    this.SelectStoreClick();
    this.SelectColorSizeClick(false,
      function (result) {
        if (result.status == 200) {
          var breadCrumb = $('.bread-crumb').html();
          var review = $('.jsReviewRating').html();
          $(inst.DivContainerId).html(result.data);
          $('.bread-crumb').html(breadCrumb);
          $('.jsReviewRating').html(review);
          $(inst.DivContainerId).off();
          $(inst.DivContainerId).val(productCode);
          feather.replace();
          var dropdown = new Dropdown(inst.DivContainerId);
          dropdown.Init();
          var product = new Product(inst.DivContainerId);
          product.AddToCartClick();
          product.AddToWishlistClick();
          inst.ChangeQuantityKeyup();
          inst.InStorePickupClick();
          inst.SelectStoreClick();
          inst.ChangeImageClick();
          inst.ZoomImage();
          inst.BuyNowClick();
        }
      }
    );
    this.ZoomImage();
    this.ChangeImageClick();
    this.ChangeQuantityKeyup();
    this.BuyNowClick();
  }

  InitQuickView() {
    var inst = this;
    // Init quickview
    $('.jsQuickView').each(function (i, e) {
      $(e).click(function () {
        var code = $(this).attr('data');
        var productCode = $(this).attr('productCode');
        var url = $(this).attr('urlQuickView');
        if (url == undefined || url == "") {
          url = "/product/quickview";
        }

        inst.quickView(code, productCode, url);
      });
    });
    //-- end
  }
}
class ProductRecs {
    getRecommendations(widget, numberOfRecs, name, value) {
        let url = '/WidgetBlock/GetRecommendations';
        let data = {
            widgetType: widget,
            numberOfRecs: numberOfRecs,
            name: name,
            value: value
        };
        axios.post(url, data)
            .then(function (result) {
                $('.recommendationwidgetblock').html(result.data);
            })
            .catch(function (error) {
                notification.Error(error);
            })
            .finally(function () {
                $('body>.loading-box').hide();
            });
    }
}
class QuickOrderBlock {
    constructor(containerId) {
        this.Container = containerId != undefined ? containerId : document;
        this.RowTemplate = (index, data) => `<div class="row js-product-row" data-order="${index}">
                <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-3">
                    <input class="form-control square-box" readonly="readonly" id='ProductsList_${index}__ProductName' name='ProductsList[${index}].ProductName' type="text" value='${data.ProductName}' style="position: relative" placeholder="Product name">
                </div>
                <div class="form-group col-xs-12 col-sm-12 col-md-6 col-lg-2">
                    <input class="form-control square-box" id="ProductsList_${index}__Sku" name="ProductsList[${index}].Sku" placeholder="Sku code" required="required" type="text" value="${data.Sku}">
                </div>
                <div class="form-group col-xs-12 col-sm-12 col-md-6 col-lg-2">
                    <input class="form-control square-box" readonly="readonly" id="ProductsList_${index}__UnitPrice" name="ProductsList[${index}].UnitPrice" type="text"
                      value="${data.UnitPrice}" placeholder="Unit price">
                </div>
                <div class="form-group col-xs-12 col-sm-12 col-md-6 col-lg-2">
                    <input class="form-control square-box" id="ProductsList_${index}__Quantity" name="ProductsList[${index}].Quantity" required="required" type="text"
                      value="${data.Quantity}" placeholder="Quantity">
                </div>
                <div class="form-group col-xs-12 col-sm-12 col-md-6 col-lg-2">
                    <input class="form-control square-box" readonly="readonly" id="ProductsList_${index}__TotalPrice" name="ProductsList[${index}].TotalPrice" type="text" value="${data.TotalPrice}" placeholder="Total price">
                </div>
                <div class="form-group col-xs-12 col-sm-12 col-md-12 col-lg-1">
                    <a href="javascript:void(0);" class="btn btn-danger jsDeleteRow">
                        <i data-feather="trash-2"></i>
                    </a>
                </div>
            </div>`;

        this.ProductListing = [];

        document.querySelectorAll('.jsQuickOrderBlockForm').forEach(form => {
            form.addEventListener('submit', event => {
                event.preventDefault()
                var data = serializeObject(form);
                var formData = convertFormData(data);

                axios.post(form.action, formData)
                    .then(function (r) {
                        cartHelper.SetCartReload(r.data.TotalItem);
                        notification.Success(r.data.Message);
                    })
                    .catch(function (e) {
                        notification.Error(e);
                    })
            })
        })
    }

    renderRow(num, element) {
        return this.RowTemplate(num, element);
    }


    renderList() {
        return this.ProductListing.reduce(
            (acc, elem, index) => {
                const row = this.renderRow(index, elem);
                return acc + "" + row;
            },
            ''
        );
    }

    setupAutoComplete(e) {
        var $autocompleteInput = $(e).find('input[name*=Sku]');
        var options = {
            url: function (phrase) {
                return "/QuickOrderBlock/GetSku?query=" + phrase;
            },
            getValue: "Sku",
            requestDelay: 500,
            list: {
                match: {
                    enabled: false
                },
                onChooseEvent: () => this.onChooseEvent($autocompleteInput)
            },
            template: {
                type: "custom",
                method: function (value, item) {
                    if (item.UrlImage == "" || item.UrlImage == undefined) {
                        return value;
                    }
                    return "<img class='eac-icon' src='" + item.UrlImage + "' /> " + value;
                }
            },
            adjustWidth: false
        };
        $autocompleteInput.easyAutocomplete(options);
    }

    onChooseEvent(element) {
        var selectedItemData = element.getSelectedItemData();
        var parent = element.parents('.js-product-row').first();
        var currentOrder = parent.data('order');
        parent.find('input[name*=ProductName]').val(selectedItemData.ProductName);
        parent.find('input[name*=UnitPrice]').val(selectedItemData.UnitPrice);
        this.ProductListing[currentOrder].ProductName = selectedItemData.ProductName;
        this.ProductListing[currentOrder].UnitPrice = selectedItemData.UnitPrice;
        this.ProductListing[currentOrder].Sku = selectedItemData.Sku;
    }

    initRenderList(inst) {
        const template = inst.renderList(inst.ProductListing);
        $(this.Container).find('.jsProductListing').html(template);
        feather.replace();
        inst.DeleteRowClick();
        inst.AutoComplete();
        inst.OnQuantityChange();
    }

    AddRowClick(container) {
        var inst = this;
        if (container == undefined) {
            $(this.Container).find('.jsAddNewRow').each(function (i, e) {
                $(e).click(function () {
                    inst.ProductListing.push(new ProductViewModel());
                    inst.initRenderList(inst);
                });
            });
        } else {
            $(container).find('.jsAddNewRow').each(function (i, e) {
                $(e).click(function () {
                    inst.ProductListing.push(new ProductViewModel());
                    inst.initRenderList(inst);
                });
            });
        }
    }

    DeleteRowClick(container) {
        var inst = this;
        if (container == undefined) {
            $(this.Container).find('.jsDeleteRow').each(function (i, e) {
                $(e).click(function () {
                    var currentOrder = $(this).parents('.js-product-row').data('order');
                    inst.ProductListing.splice(currentOrder, 1);
                    inst.initRenderList(inst);
                });
            });
        } else {
            $(container).find('.jsDeleteRow').each(function (i, e) {
                $(e).click(function () {
                    var currentOrder = $(this).parents('.js-product-row').data('order');
                    inst.ProductListing.splice(currentOrder, 1);
                    inst.initRenderList(inst);
                });
            });
        }
    }

    AutoComplete(container) {
        var inst = this;

        if (container != undefined) {
            $(container).find('.js-product-row').each(function (i, e) {
                inst.setupAutoComplete($(e));
            });
        } else {
            $(this.Container).find('.js-product-row').each(function (i, e) {
                inst.setupAutoComplete($(e));
            });
        }
    }

    quantityChange(element, inst) {
        $(element).keyup(function () {
            var currentOrder = $(this).parents('.js-product-row').first().data('order');
            var quantity = $(this).val();
            var unitPrice = $(this).parents('.js-product-row').find('input[name*=UnitPrice]').val();
            var totalPrice = parseFloat(parseFloat(unitPrice) * parseInt(quantity)).toFixed(2);
            inst.ProductListing[currentOrder].Quantity = quantity;
            inst.ProductListing[currentOrder].TotalPrice = totalPrice;

            $(this).parents('.js-product-row').find('input[name*=TotalPrice]').val(totalPrice);
        });
    }

    OnQuantityChange(container) {
        var inst = this;
        if (container != undefined) {
            var inputsQuantity = $(container).find('input[name*=Quantity]');
            inputsQuantity.each(function (i, e) {
                inst.quantityChange(e, inst);
            });
        } else {
            $(this.Container).find('input[name*=Quantity]').each(function (i, e) {
                inst.quantityChange($(e), inst);
            });
        }
    }

    UploadCSVClick() {
        var inst = this;
        $('.jsUploadCSVBtn').click(function () {
            $('#fileUploaded').click();
        });

        $('#fileUploaded').change(function () {
            $('.loading-box').show();
            var file = $("#fileUploaded")[0].files[0];
            var formData = new FormData();
            formData.append('file', file);
            formData.append('__RequestVerificationToken', $('input[name="__RequestVerificationToken"]').val());

            axios.post('/QuickOrderBlock/AddFromFile', formData)
                .then(function (res) {
                    if (res.data.Status != "OK") {
                        $('.jsShowMessage').html(`<div class="error">` + res.data.Message + `</div>`);
                    } else {
                        $('.jsShowMessage').html(`<div class="success">` + res.data.Message + `</div>`);
                        if (res.data.Products.length > 0) {
                            // remove empty product
                            if (inst.ProductListing.length > 0) {
                                for (var i = inst.ProductListing.length - 1; i >= 0; i--) {
                                    if (inst.ProductListing[i].Sku == "") {
                                        inst.ProductListing.splice(i, 1);
                                    }
                                }
                            }

                            for (var i = 0; i < res.data.Products.length; i++) {
                                inst.ProductListing.push(res.data.Products[i]);
                            }
                            inst.initRenderList(inst);
                        }
                    }
                })
                .catch(function (err) {
                    notification.Error(err);
                })
                .finally(function () {
                    $('.loading-box').hide();
                });
        });
    }

    Init() {
        var products = $(this.Container).find('.js-product-row');
        if (products.length > 0) {
            this.ProductListing = [];
            var inst = this;
            products.each(function (i, e) {
                var newProduct = new ProductViewModel();
                newProduct.ProductName = $(e).find('input[name*=ProductName]').val();
                newProduct.Sku = $(e).find('input[name*=Sku]').val();
                newProduct.UnitPrice = $(e).find('input[name*=UnitPrice]').val();
                newProduct.Quantity = $(e).find('input[name*=Quantity]').val();
                newProduct.TotalPrice = $(e).find('input[name*=TotalPrice]').val();
                inst.ProductListing.push(newProduct);
            });
        }

        $('.jsLabelUpload').html($('#fileUploaded').data('label'));
        this.AddRowClick();
        this.DeleteRowClick();
        this.AutoComplete();
        this.OnQuantityChange();
        this.UploadCSVClick();
    }
}

class ProductViewModel {
    constructor() {
        this.ProductName = "";
        this.Sku = "";
        this.UnitPrice = 0.0;
        this.Quantity = 0;
        this.TotalPrice = 0.0;
    }
}
class Review {
    RatingHover() {
        $('.rating.voting').each(function (i, e) {
            $(e).find('svg').each(function (j, s) {
                $(s).hover(function () {
                    for (let index = 0; index <= j; index++) {
                        $($(e).find('svg')[index]).css('fill', 'black');
                    }

                    for (let index = $(e).find('svg').length - 1; index > j; index--) {
                        $($(e).find('svg')[index]).css('fill', 'none');
                    }
                });
            });
        });

        $('.rating.voting').each(function (i, e) {
            $(e).mouseleave(function () {
                $(this).find('svg').each(function (i, e) {
                    $(e).removeAttr('style');
                });
            });
        });
    }

    RatingClick() {
        $('.rating.voting').each(function (i, e) {
            $(e).find('svg').each(function (j, s) {
                $(s).click(function () {
                    $(this).parents('.rating.voting').first().removeClass('rate-1');
                    $(this).parents('.rating.voting').first().removeClass('rate-2');
                    $(this).parents('.rating.voting').first().removeClass('rate-3');
                    $(this).parents('.rating.voting').first().removeClass('rate-4');
                    $(this).parents('.rating.voting').first().removeClass('rate-5');
                    $(this).parents('.rating.voting').first().addClass('rate-' + (j + 1));
                    $(this).parents('.rating.voting').first().attr('rate', (j + 1));
                });
            });
        });
    }


    SubmitReview() {
        var inst = this;
        $('#submitReview').click(function () {
            //var token = $('input[name=__RequestVerificationToken]').val();
            var rate = $('.rating.voting').attr('rate');
            var code = $('#ProductCode').val();
            var title = $('#Title').val();
            var nickname = $('#Nickname').val();
            var location = $('#Location').val();
            var content = $('#Body').val();
            var data = {
                ProductCode: code,
                Title: title,
                Nickname: nickname,
                Location: location,
                Body: content,
                Rating: rate
            };
            if (inst.validateReview(data)) {
                $('.loading-box').show();
                var form = $(this).closest("form");
                axios.post(form[0].action, convertFormData(data))
                    .then(function (result) {
                        if (result.status == 200) {
                            notification.Success("You have added a comment to " + code);
                            $('#reviewsListing').append(result.data);
                            feather.replace();
                        }
                    })
                    .catch(function (error) {
                        notification.Error(error.response.statusText);
                    })
                    .finally(function () {
                        $('.loading-box').hide();
                    });
            }
            return false;
        });
    }

    validateReview(data) {
        var isValid = true;
        if (data) {
            isValid = this.validateFiled(data, "Nickname", isValid);
            isValid = this.validateFiled(data, "Title", isValid);
            isValid = this.validateFiled(data, "Location", isValid);
            isValid = this.validateFiled(data, "Body", isValid, "Review");

            if (!($('.rating.voting').attr('rate'))) {
                $('.error[for="Rating"]').html('Rating is required.');
                isValid = false;
            } else {
                $('.error[for="Rating"]').html('');
            }
        } else {
            isValid = false;
        }

        return isValid;
    }

    validateFiled(data, fieldName, isValid, labelName) {
        if (!data[fieldName] || data[fieldName].trim() == "") {
            labelName = labelName == undefined ? fieldName : labelName;
            $('.error[for="' + fieldName + '"]').html(labelName + ' is required.');
            isValid = false;
        } else {
            $('.error[for="' + fieldName + '"]').html('');
        }

        return isValid;
    }
}
class ProductSearch {
    constructor() {
        // for filtering
        this.PageClass = "jsPaginate";
        this.SortClass = "jsSort";
        this.PageSizeClass = "jsPageSize";
        this.ViewModeClass = "jsViewMode";
        this.SortDirectionClass = "jsSortDirection";
        this.FacetClass = "jsFacet";

        this.Params = "";
        this.RootUrl = window.location.href.substr(0, window.location.href.indexOf('?'));
        // to get information page
        this.Page = ".jsPageInfo";
        this.PageSize = ".jsPageSizeInfo";
        this.Sort = ".jsSortInfo";
        this.SortDirection = ".jsSortDirectionInfo";
        this.ViewMode = ".jsViewModeInfo";
    }

    /// Search, Filter handler
    paginate(page) {
        $(this.Page).val(page);
        this.search();
    }

    removeTag(inputName) {
        $(`input[name='${inputName}']`).prop('checked', false);
        this.search();
    }

    removeAllTag() {
        $('.jsSearchFacet:input:checked').each(function (i, e) {
            //$('.jsSearchFacet:input:checked')
            $(e).removeAttr('checked');
        });
        this.search();
    }

    sort(sortBy) {
        $(this.Sort).val(sortBy);
        this.search();
    }

    sortDirection(direction) {
        $(this.SortDirection).val(direction);
        this.search();
    }

    changePageSize(pageSize) {
        $(this.PageSize).val(pageSize);
        this.search();
    }

    changeViewMode(mode) {
        $(this.ViewMode).val(mode);
        this.search();
    }

    getFilter() {
        var q = new FilterOption();
        q.Page = $(this.Page).val();
        q.PageSize = $(this.PageSize).val();
        q.Sort = $(this.Sort).val();
        q.SortDirection = $(this.SortDirection).val();
        q.ViewSwitcher = $(this.ViewMode).val();

        this.Params = this.getUrlWithFacets();

        return q;
    }

    search() {
        var inst = this;
        var data = this.getFilter();
        $('body>.loading-box').show();

        var expanding = document.querySelector('.selection--cm__collapse:not(.hidden)')
        var expandingFacetEl = expanding && expanding.closest('.selection--cm')
        var expandingFacet = expandingFacetEl && expandingFacetEl.dataset.facetkey

        axios({ url: inst.RootUrl + inst.Params, params: { ...data }, method: 'get' })
            .then(function (result) {
                window.history.replaceState(null, null, inst.Params == "" ? "?" : inst.Params);
                $('.toolbar').replaceWith($(result.data).find('.toolbar'));
                $('.jsFacets').replaceWith($(result.data).find('.jsFacets'));
                $('.jsProducts').replaceWith($(result.data).find('.jsProducts'));
                feather.replace();
                new Selection().Init();
                if (expandingFacet) {
                    var ul = document.querySelector(`.selection--cm[data-facetkey=${expandingFacet}]`)
                    var dropdown = ul.querySelector('.selection--cm__dropdown')
                    var collapse = ul.querySelector('.selection--cm__collapse')
                    var expand = ul.querySelector('.selection--cm__expand')
                    dropdown.style.display = 'block'
                    collapse.classList.remove('hidden')
                    expand.classList.add('hidden')
                }
                var quickView = new ProductDetail('#quickView');
                quickView.InitQuickView();
                var product = new Product(".jsProducts");
                product.AddToCartClick();
                product.AddToWishlistClick();
                inst.Init();
            })
            .catch(function (error) {
                notification.Error(error);
            })
            .finally(function () {
                $('.loading-box').hide();
            });
    }


    getUrlWithFacets() {
        var facets = [];
        $('.jsSearchFacet:input:checked').each(function () {
            var selectedFacet = encodeURIComponent($(this).data('facetkey'));
            facets.push(selectedFacet);
        });
        return this.getUrl(facets);
    }
    getUrl(facets) {
        var urlParams = this.getUrlParams();
        urlParams.facets = facets ? facets.join(',') : null;
        //var sort = $('.jsSearchSort')[0].value;
        urlParams.sort = '';
        var url = "?";
        for (var key in urlParams) {
            var value = urlParams[key];
            if (value) {
                url += key + '=' + value + '&';
            }
        }
        return url.slice(0, -1); //remove last char
    }
    getUrlParams() {
        var match,
            search = /([^&=]+)=?([^&]*)/g, //regex to find key value pairs in querystring
            query = window.location.search.substring(1);

        var urlParams = {};
        while (match = search.exec(query)) {
            urlParams[match[1]] = match[2];
        }
        return urlParams;
    }
    ///--- end

    Init() {
        var inst = this;

        // Init filter
        $('.jsUpdatePage').each(function (i, e) {
            $(e).click(function () {
                var data = $(this).attr('data');
                if ($(this).hasClass(inst.PageClass)) {
                    inst.paginate(data);
                }

                if ($(this).hasClass(inst.PageSizeClass)) {
                    inst.changePageSize(data);
                }

                if ($(this).hasClass(inst.SortClass)) {
                    inst.sort(data);
                }

                if ($(this).hasClass(inst.SortDirectionClass)) {
                    inst.sortDirection(data);
                }

                if ($(this).hasClass(inst.ViewModeClass)) {
                    inst.changeViewMode(data);
                }

                if ($(this).hasClass(inst.FacetClass)) {
                    $(this).siblings('input.jsSearchFacet').first().prop('checked', true);
                }
            });
        });

        $('.jsSearchFacet:checkbox').each(function (i, e) {
            $(e).change(function () {
                inst.search();
            });
        });

        $('.jsSearchFacetRemoveAll').click(function () {
            inst.removeAllTag();
        });

        $('.jsRemoveTag').each(function (i, e) {
            $(e).click(function () {
                var name = $(this).siblings('.jsSearchFacetSelected').attr('name');
                inst.removeTag(name);
            });
        });
        //-- end
    }
}

class FilterOption {
    constructor() {
        this.Page = 1;
        this.PageSize = 15;
        this.Sort = "Position";
        this.SortDirection = "Asc";
        this.ViewSwitcher = "Grid";
    }
}

class ContentSearch {

    changePageContent(page) {
        var search = new ProductSearch();
        var inst = this;
        var form = $(document).find('.jsSearchContentForm');
        $('.jsSearchContentPage').val(page);
        $('.jsSelectedFacet').val($(this).data('facetgroup') + ':' + $(this).data('facetkey'));
        var url = search.getUrlWithFacets();
        inst.updatePageContent(url, form.serialize(), null);
    }

    updatePageContent(url, data, onSuccess) {
        var inst = this;
        axios.post(url || "", data)
            .then(function (result) {
                $('#contentResult').replaceWith($(result.data).find('#contentResult'));
                inst.Init();
            })
            .catch(function (error) {
                notification.Error(error);
            })
            .finally(function () {
                $('.loading-box').hide();
            });
    }

    Init() {
        var inst = this;
        $('.jsChangePageContent').each(function (i, e) {
            $(e).click(function () {
                $('.loading-box').show();
                var page = $(this).attr('page');
                inst.changePageContent(page);
            });
        });
    }
}

class NewProductsSearch {
    changePageContent(page) {
        var inst = this;
        var url = window.location.href + "?page=" + page;
        inst.updatePageContent(url);
    }

    updatePageContent(url) {
        var inst = this;
        axios.get(url || "")
            .then(function (result) {
                $('#new-products-page').replaceWith($(result.data).find('#new-products-page'));
                inst.Init();
            })
            .catch(function (error) {
                notification.Error(error);
            })
            .finally(function () {
                $('.loading-box').hide();
            });
    }

    Init() {
        var inst = this;
        $('.jsPaginateNewProductsPage').each(function (i, e) {
            $(e).click(function () {
                $('.loading-box').show();
                var page = $(this).attr('page');
                inst.changePageContent(page);
            });
        });
    }
}

class SalesSearch {
    changePageContent(page) {
        var inst = this;
        var url = window.location.href + "?page=" + page;
        inst.updatePageContent(url);
    }

    updatePageContent(url) {
        var inst = this;
        axios.get(url || "")
            .then(function (result) {
                $('#sales-page').replaceWith($(result.data).find('#sales-page'));
                inst.Init();
            })
            .catch(function (error) {
                notification.Error(error);
            })
            .finally(function () {
                $('.loading-box').hide();
            });
    }

    Init() {
        var inst = this;
        $('.jsPaginateSalesPage').each(function (i, e) {
            $(e).click(function () {
                $('.loading-box').show();
                var page = $(this).attr('page');
                inst.changePageContent(page);
            });
        });
    }
}
class SearchBox {
    constructor() {
        this.ApiUrl = "https://eastus.api.cognitive.microsoft.com/vision/v1.0/analyze?visualFeatures=Description";
        this.AuthKey = "38192ad9dc5647d1b4d6328d420ac505";
        this.ImageSizeLimit = 5;
    }

    Init() {
        const inst = this;
        this.btn = document.getElementById("js-searchbutton");
        this.box = document.getElementById("js-searchbox");
        this.boxInput = document.getElementById("js-searchbox-input");
        if (this.box) {
            this.box.style.width = "80px";
            this.box.style.visibility = "hidden";
        }
        var typingTimer;

        $("#js-searchbutton").click(function () {
            inst.ExpandSearchBox();
        });
        $("#js-searchbox-close").click(function () {
            inst.CollapseSearchBox();
        });
        $(".jsSearchText").each(function (i, e) {
            inst.boxContent = $($(e).data('result-container'))[0];
            if ($("#searchOption").val() != "QuickSearch") {
                inst.AutoSearch(e);
                $(e).on("keyup", function () {
                    clearTimeout(typingTimer);
                    const val = $(this).val();
                    typingTimer = setTimeout(function () {
                        var e = $.Event("keypress", { which: 13 });
                        $('#js-searchbox-input').trigger(e);
                    }, 5000);
                });
            } else {
                $(e).on("keyup", function () {
                    clearTimeout(typingTimer);
                    const val = $(this).val();
                    const container = $(this).data('result-container');
                    const divParent = "#" + $(this).parent().attr('id');
                    typingTimer = setTimeout(function () {
                        inst.Search(val, divParent, container);
                    }, 1000);
                });
            }

            $(e).on('keypress',
                function (e) {
                    if (e.which == 13) {
                        const searchUrl = $(this).data('search');
                        const val = $(this).val();
                        var url = `${searchUrl}?search=${val}`;
                        if ($(this).attr('id') == 'js-searchbox-input') {
                            var confidence = $('#searchConfidence').val();
                            url += "&Confidence=" + confidence;
                        }

                        location.href = url;
                    }
                });
        });

        document.addEventListener("click", function (e) {
            if (inst.box && inst.boxContent && inst.btn) {
                if (inst.box.contains(e.target) || inst.btn.contains(e.target) || inst.boxContent.contains(e.target)) {
                    return;
                }

                inst.HidePopover();
                inst.CollapseSearchBox();
            }
        });

        inst.ProcessImage();
    }

    ExpandSearchBox() {
        this.btn.style.display = "none";
        this.box.style.width = "324px";
        this.box.style.visibility = "visible";
        this.boxInput.focus();
    }

    CollapseSearchBox() {
        this.btn.style.display = "flex";
        this.box.style.width = "80px";
        const inst = this;
        setTimeout(
            function () {
                inst.box.style.visibility = "hidden";
                inst.HidePopover();
            },
            200
        );
    }

    Search(val, divInputElement, containerPopover) {
        var waitTimer;
        clearTimeout(waitTimer);
        waitTimer = setTimeout(function () {
            $(containerPopover + ' .loading-cart').show();
        }, 500);
        const inst = this;
        if (val) {
            if (!this.desktop && containerPopover === '#jsResultSearch') {
                const reference = $(divInputElement);
                const popover = $(containerPopover);
                this.desktop = new Popper(reference, popover);
            } else if (!this.mobile && containerPopover === '#jsResultSearchMobile') {
                const reference = $(divInputElement);
                const popover = $(containerPopover);
                this.mobile = new Popper(reference, popover, {
                    modifiers: {
                        preventOverflow: {
                            padding: 0
                        }
                    }
                });
            } else if (this.desktop) {
                this.desktop.update();
            } else if (this.mobile) {
                this.mobile.update();
            }

            if (inst.searching) {
                inst.cancel();
            }

            inst.searching = true;
            const CancelToken = axios.CancelToken;

            axios.post(
                "/Search/QuickSearch",
                {
                    search: val
                },
                {
                    cancelToken: new CancelToken(function (c) {
                        inst.cancel = c;
                    })
                })
                .then(function ({ data }) {
                    inst.searching = false;
                    $(containerPopover).find('.js-searchbox-content').first().html(data);
                    clearTimeout(waitTimer);
                    $(containerPopover + ' .loading-cart').hide();
                })
                .catch(function (response) {
                    if (!axios.isCancel(response)) {
                        inst.searching = false;
                        clearTimeout(waitTimer);
                        $(containerPopover + ' .loading-cart').hide();
                    }
                });

            this.ShowPopover(containerPopover);
        } else {
            this.HidePopover();
        }
    }
   
    AutoSearch(e) {
        var options = {
            url: function (phrase) {
                return "/find_v2/_autocomplete?prefix=" + phrase;
            },
            requestDelay: 500,
            list: {
                match: {
                    enabled: false
                },
                onChooseEvent: function () {
                    var keyword = $(e).getSelectedItemData().query;
                    $(e).val(keyword);
                    var e = $.Event("keypress", { which: 13 });
                    $(e).trigger(e);
                }
            },
            listLocation: "hits",
            getValue: "query",
            template: {
                type: "custom",
                method: function (value, item) {
                    return value;
                }
            },
            adjustWidth: false
        };
        $(e).easyAutocomplete(options);
    }

    ShowPopover(containerPopover) {
        $(containerPopover).show();
    }

    HidePopover() {
        $('.searchbox-popover').hide();
    }

    // Search Image
    ProcessImage() {
        var inst = this;
        $('.jsSearchImage').each(function (i, e) {
            var fileId = $(e).data('input');
            $(e).click(function () {
                $(fileId).click();
            });

            $(fileId).change(function () {
                try {
                    $('.loading-box').show();
                    var files = this.files;
                    $(".validateErrorMsg").hide();
                    inst.InputValidation(files);
                } catch (e) {
                    console.log(e);
                }
            });
        });
    }

    InputValidation(files) {
        const inst = this;
        if (files.length == 1) {
            var regexForExtension = /(?:\.([^.]+))?$/;
            var extension = regexForExtension.exec(files[0].name)[1];
            var size = files[0].size / 1024 / 1024;
            if ((size > inst.ImageSizeLimit)) {
                errorMessage = "Image Size Should be lesser than " + inst.ImageSizeLimit + "MB";
                $(".validateErrorMsg").text(errorMessage).show();
                return false;
            } else if ((extension != "jpg" && extension != "png" && extension != "jpeg")) {
                errorMessage = "Uploaded File Should Be An Image";
                $(".validateErrorMsg").text(errorMessage).show();
                return false;
            }
            var reader = new FileReader();
            reader.onload = function () {
                inst.ProcessImage.imageData = reader.result;
                var arrayBuffer = this.result, array = new Uint8Array(arrayBuffer);
                if (typeof (inst.ProcessImage.imageData) == "undefined") {
                    errorMessage = "Upload File A Vaild Image";
                    $(".validateErrorMsg").text(errorMessage).show();
                }
                inst.ImageProcess(inst.ProcessImage.imageData);
            };
            reader.readAsDataURL(files[0]);
        }
    }

    ImageProcess(DataURL) {
        const inst = this;
        var request = new XMLHttpRequest();
        request.open('POST', inst.ApiUrl);
        request.setRequestHeader('Content-Type', 'application/octet-stream');
        request.setRequestHeader('Ocp-Apim-Subscription-Key', inst.AuthKey);
        request.onreadystatechange = function () {
            if (this.readyState === 4) {
                var result = JSON.parse(this.response);
                if (result.description) {
                    $('#searchConfidence').val(result.description.captions[0].confidence);
                    $('#js-searchbox-input').val(result.description.captions[0].text);
                    var e = $.Event("keypress", { which: 13 });
                    $('#js-searchbox-input').trigger(e);
                } else {
                    errorMessage = "Uploaded Image has been failed.";
                    $(".validateErrorMsg").text(errorMessage).show();
                    return false;
                }
            }
        };
        var body = {
            'image': DataURL,
            'locale': 'en_US'
        };
        var response = request.send(inst.Makeblob(DataURL));
    }

    Makeblob(dataURL) {
        var BASE64_MARKER = ';base64,';
        if (dataURL.indexOf(BASE64_MARKER) == -1) {
            var parts = dataURL.split(',');
            var contentType = parts[0].split(':')[1];
            var raw = decodeURIComponent(parts[1]);
            return new Blob([raw], { type: contentType });
        }
        var base64parts = dataURL.split(BASE64_MARKER);
        var base64contentType = base64parts[0].split(':')[1];
        var base64raw = window.atob(base64parts[1]);
        var base64rawLength = base64raw.length;

        var uInt8Array = new Uint8Array(base64rawLength);

        for (var i = 0; i < base64rawLength; ++i) {
            uInt8Array[i] = base64raw.charCodeAt(i);
        }

        return new Blob([uInt8Array], { type: base64contentType });
    }
}
class Selection {
    Init() {
        this.Expand();
        this.Collapse();
        this.ItemClick();
    }

    Expand() {
        var selections = $('.selection--cm');
        selections.each(function (i, e) {
            $(e).find('.selection--cm__expand').each(function (j, s) {
                $(s).click(function () {
                    var self = this
                    $(this).addClass('hidden');
                    $(this).siblings('.selection--cm__collapse').removeClass('hidden');
                    $(this).siblings('.selection--cm__dropdown').slideToggle('hidden');

                    selections.each(function () {
                        if (!this.contains(self)) {
                            $(this).find('.selection--cm__dropdown').each(function () {
                                $(this).slideUp();
                            });
                            $(this).find('.selection--cm__collapse').each(function () {
                                $(this).addClass('hidden');
                            });
                            $(this).find('.selection--cm__expand').each(function () {
                                $(this).removeClass('hidden');
                            });
                        }
                    })
                });
            });
        });
    }

    Collapse() {
        var selections = $('.selection--cm');
        selections.each(function (i, e) {
            $(e).find('.selection--cm__collapse').each(function (j, s) {
                $(s).click(function () {
                    $(this).addClass('hidden');
                    $(this).siblings('.selection--cm__expand').removeClass('hidden');
                    $(this).siblings('.selection--cm__dropdown').slideToggle('hidden');
                });
            });
        });
    }

    ItemClick() {
        $('.selection--cm').each(function (i, e) {
            $(e).children('li').each(function (j, s) {
                $(s).click(function (event) {
                    if ($(event.target).hasClass('jsFirstLi') || $(event.target).hasClass('jsFirstSpan')) {
                        var child = $(this).children('.jsExpandCollapse').not('.hidden');
                        child.click();
                    }
                })
            })
        })

        $('.offside-navbar--menu').each(function (i, e) {
            $(e).children('li').each(function (j, s) {
                $(s).click(function (event) {
                    if ($(event.target).hasClass('jsFirstLi') || $(event.target).hasClass('jsFirstSpan')) {
                        var child = $(this).children('.jsExpandCollapse').not('.hidden');
                        child.click();
                    }
                })
            })
        })
    }
}
class UsersOrganization {
    Init() {
        this.LookupUser();
        this.SearchUsersEvent();
    }
    
    onChooseEvent(element) {
        var selectedItemData = element.getSelectedItemData();
        var form = $('#addUserForm');
        form.find('input[name*=Email]').val(selectedItemData.Email);
        form.find('input[name*=FirstName]').val(selectedItemData.FirstName);
        form.find('input[name*=LastName]').val(selectedItemData.LastName);
    }

    LookupUser() {
        var inst = this;
        var $autocompleteInput = $('#addUsersAutocomplete');
        var options = {
            url: function (phrase) {
                return "/Users/GetUsers?query=" + phrase;
            },
            getValue: "Email",
            requestDelay: 500,
            list: {
                match: {
                    enabled: false
                },
                onChooseEvent: () => this.onChooseEvent($autocompleteInput)
            },
            theme: "fullwidth"
        };
        $autocompleteInput.easyAutocomplete(options);
    }


    SearchUsersEvent() {
        var inst = this;
        $('#jsSearchUsersOrganizationBtn').click(function () {
            inst.searchUsers();
        })

        $('#jsSearchUsersOrganizationTxt').keyup(function (e) {
            if (e.keyCode == 13) {
                inst.searchUsers();
            }
        })
    }

    searchUsers() {
        var query = $('#jsSearchUsersOrganizationTxt').val().toLowerCase();
        var users = $('.jsUsersOrganiztionListing').find('.jsRowUser');
        users.each(function (i, e) {
            if ($(e).data('name').toLowerCase().includes(query) || $(e).data('email').toLowerCase().includes(query)) {
                $(e).css('display', 'table-row');
            } else {
                $(e).css('display', 'none');
            }
        })
    }
}
/* Notify.js - http://notifyjs.com/ Copyright (c) 2015 MIT */
(function (factory) {
	// UMD start
	// https://github.com/umdjs/umd/blob/master/jqueryPluginCommonjs.js
	if (typeof define === 'function' && define.amd) {
		// AMD. Register as an anonymous module.
		define(['jquery'], factory);
	} else if (typeof module === 'object' && module.exports) {
		// Node/CommonJS
		module.exports = function( root, jQuery ) {
			if ( jQuery === undefined ) {
				// require('jQuery') returns a factory that requires window to
				// build a jQuery instance, we normalize how we use modules
				// that require this pattern but the window provided is a noop
				// if it's defined (how jquery works)
				if ( typeof window !== 'undefined' ) {
					jQuery = require('jquery');
				}
				else {
					jQuery = require('jquery')(root);
				}
			}
			factory(jQuery);
			return jQuery;
		};
	} else {
		// Browser globals
		factory(jQuery);
	}
}(function ($) {
	//IE8 indexOf polyfill
	var indexOf = [].indexOf || function(item) {
		for (var i = 0, l = this.length; i < l; i++) {
			if (i in this && this[i] === item) {
				return i;
			}
		}
		return -1;
	};

	var pluginName = "notify";
	var pluginClassName = pluginName + "js";
	var blankFieldName = pluginName + "!blank";

	var positions = {
		t: "top",
		m: "middle",
		b: "bottom",
		l: "left",
		c: "center",
		r: "right"
	};
	var hAligns = ["l", "c", "r"];
	var vAligns = ["t", "m", "b"];
	var mainPositions = ["t", "b", "l", "r"];
	var opposites = {
		t: "b",
		m: null,
		b: "t",
		l: "r",
		c: null,
		r: "l"
	};

	var parsePosition = function(str) {
		var pos;
		pos = [];
		$.each(str.split(/\W+/), function(i, word) {
			var w;
			w = word.toLowerCase().charAt(0);
			if (positions[w]) {
				return pos.push(w);
			}
		});
		return pos;
	};

	var styles = {};

	var coreStyle = {
		name: "core",
		html: "<div class=\"" + pluginClassName + "-wrapper\">\n	<div class=\"" + pluginClassName + "-arrow\"></div>\n	<div class=\"" + pluginClassName + "-container\"></div>\n</div>",
		css: "." + pluginClassName + "-corner {\n	position: fixed;\n	margin: 116px 9px;\n	z-index: 1050;\n}\n\n." + pluginClassName + "-corner ." + pluginClassName + "-wrapper,\n." + pluginClassName + "-corner ." + pluginClassName + "-container {\n	position: relative;\n	display: block;\n	height: inherit;\n	width: inherit;\n	margin: 3px;\n}\n\n." + pluginClassName + "-wrapper {\n	z-index: 1;\n	position: absolute;\n	display: inline-block;\n	height: 0;\n	width: 0;\n}\n\n." + pluginClassName + "-container {\n	display: none;\n	z-index: 1;\n	position: absolute;\n}\n\n." + pluginClassName + "-hidable {\n	cursor: pointer;\n}\n\n[data-notify-text],[data-notify-html] {\n	position: relative;\n}\n\n." + pluginClassName + "-arrow {\n	position: absolute;\n	z-index: 2;\n	width: 0;\n	height: 0;\n}"
	};

	var stylePrefixes = {
		"border-radius": ["-webkit-", "-moz-"]
	};

	var getStyle = function(name) {
		return styles[name];
	};

	var removeStyle = function(name) {
		if (!name) {
			throw "Missing Style name";
		}
		if (styles[name]) {
			delete styles[name];
		}
	};

	var addStyle = function(name, def) {
		if (!name) {
			throw "Missing Style name";
		}
		if (!def) {
			throw "Missing Style definition";
		}
		if (!def.html) {
			throw "Missing Style HTML";
		}
		//remove existing style
		var existing = styles[name];
		if (existing && existing.cssElem) {
			if (window.console) {
				console.warn(pluginName + ": overwriting style '" + name + "'");
			}
			styles[name].cssElem.remove();
		}
		def.name = name;
		styles[name] = def;
		var cssText = "";
		if (def.classes) {
			$.each(def.classes, function(className, props) {
				cssText += "." + pluginClassName + "-" + def.name + "-" + className + " {\n";
				$.each(props, function(name, val) {
					if (stylePrefixes[name]) {
						$.each(stylePrefixes[name], function(i, prefix) {
							return cssText += "	" + prefix + name + ": " + val + ";\n";
						});
					}
					return cssText += "	" + name + ": " + val + ";\n";
				});
				return cssText += "}\n";
			});
		}
		if (def.css) {
			cssText += "/* styles for " + def.name + " */\n" + def.css;
		}
		if (cssText) {
			def.cssElem = insertCSS(cssText);
			def.cssElem.attr("id", "notify-" + def.name);
		}
		var fields = {};
		var elem = $(def.html);
		findFields("html", elem, fields);
		findFields("text", elem, fields);
		def.fields = fields;
	};

	var insertCSS = function(cssText) {
		var e, elem, error;
		elem = createElem("style");
		elem.attr("type", 'text/css');
		$("head").append(elem);
		try {
			elem.html(cssText);
		} catch (_) {
			elem[0].styleSheet.cssText = cssText;
		}
		return elem;
	};

	var findFields = function(type, elem, fields) {
		var attr;
		if (type !== "html") {
			type = "text";
		}
		attr = "data-notify-" + type;
		return find(elem, "[" + attr + "]").each(function() {
			var name;
			name = $(this).attr(attr);
			if (!name) {
				name = blankFieldName;
			}
			fields[name] = type;
		});
	};

	var find = function(elem, selector) {
		if (elem.is(selector)) {
			return elem;
		} else {
			return elem.find(selector);
		}
	};

	var pluginOptions = {
		clickToHide: true,
		autoHide: true,
		autoHideDelay: 5000,
		arrowShow: true,
		arrowSize: 5,
		breakNewLines: true,
		elementPosition: "bottom",
		globalPosition: "top right",
		style: "bootstrap",
		className: "error",
		showAnimation: "slideDown",
		showDuration: 400,
		hideAnimation: "slideUp",
		hideDuration: 200,
        gap: 5,
        encodeMess: true
	};

	var inherit = function(a, b) {
		var F;
		F = function() {};
		F.prototype = a;
		return $.extend(true, new F(), b);
	};

	var defaults = function(opts) {
		return $.extend(pluginOptions, opts);
	};

	var createElem = function(tag) {
		return $("<" + tag + "></" + tag + ">");
	};

	var globalAnchors = {};

	var getAnchorElement = function(element) {
		var radios;
		if (element.is('[type=radio]')) {
			radios = element.parents('form:first').find('[type=radio]').filter(function(i, e) {
				return $(e).attr("name") === element.attr("name");
			});
			element = radios.first();
		}
		return element;
	};

	var incr = function(obj, pos, val) {
		var opp, temp;
		if (typeof val === "string") {
			val = parseInt(val, 10);
		} else if (typeof val !== "number") {
			return;
		}
		if (isNaN(val)) {
			return;
		}
		opp = positions[opposites[pos.charAt(0)]];
		temp = pos;
		if (obj[opp] !== undefined) {
			pos = positions[opp.charAt(0)];
			val = -val;
		}
		if (obj[pos] === undefined) {
			obj[pos] = val;
		} else {
			obj[pos] += val;
		}
		return null;
	};

	var realign = function(alignment, inner, outer) {
		if (alignment === "l" || alignment === "t") {
			return 0;
		} else if (alignment === "c" || alignment === "m") {
			return outer / 2 - inner / 2;
		} else if (alignment === "r" || alignment === "b") {
			return outer - inner;
		}
		throw "Invalid alignment";
	};

	var encode = function(text) {
		encode.e = encode.e || createElem("div");
		return encode.e.text(text).html();
	};

	function Notification(elem, data, options) {
		if (typeof options === "string") {
			options = {
				className: options
			};
		}
		this.options = inherit(pluginOptions, $.isPlainObject(options) ? options : {});
		this.loadHTML();
		this.wrapper = $(coreStyle.html);
		if (this.options.clickToHide) {
			this.wrapper.addClass(pluginClassName + "-hidable");
		}
		this.wrapper.data(pluginClassName, this);
		this.arrow = this.wrapper.find("." + pluginClassName + "-arrow");
		this.container = this.wrapper.find("." + pluginClassName + "-container");
		this.container.append(this.userContainer);
		if (elem && elem.length) {
			this.elementType = elem.attr("type");
			this.originalElement = elem;
			this.elem = getAnchorElement(elem);
			this.elem.data(pluginClassName, this);
			this.elem.before(this.wrapper);
		}
		this.container.hide();
		this.run(data);
	}

	Notification.prototype.loadHTML = function() {
		var style;
		style = this.getStyle();
		this.userContainer = $(style.html);
		this.userFields = style.fields;
	};

	Notification.prototype.show = function(show, userCallback) {
		var args, callback, elems, fn, hidden;
		callback = (function(_this) {
			return function() {
				if (!show && !_this.elem) {
					_this.destroy();
				}
				if (userCallback) {
					return userCallback();
				}
			};
		})(this);
		hidden = this.container.parent().parents(':hidden').length > 0;
		elems = this.container.add(this.arrow);
		args = [];
		if (hidden && show) {
			fn = "show";
		} else if (hidden && !show) {
			fn = "hide";
		} else if (!hidden && show) {
			fn = this.options.showAnimation;
			args.push(this.options.showDuration);
		} else if (!hidden && !show) {
			fn = this.options.hideAnimation;
			args.push(this.options.hideDuration);
		} else {
			return callback();
		}
		args.push(callback);
		return elems[fn].apply(elems, args);
	};

	Notification.prototype.setGlobalPosition = function() {
		var p = this.getPosition();
		var pMain = p[0];
		var pAlign = p[1];
		var main = positions[pMain];
		var align = positions[pAlign];
		var key = pMain + "|" + pAlign;
		var anchor = globalAnchors[key];
		if (!anchor || !document.body.contains(anchor[0])) {
			anchor = globalAnchors[key] = createElem("div");
			var css = {};
			css[main] = 0;
			if (align === "middle") {
				css.top = '45%';
			} else if (align === "center") {
				css.left = '45%';
			} else {
				css[align] = 0;
			}
			anchor.css(css).addClass(pluginClassName + "-corner");
			$("body").append(anchor);
		}
		return anchor.prepend(this.wrapper);
	};

	Notification.prototype.setElementPosition = function() {
		var arrowColor, arrowCss, arrowSize, color, contH, contW, css, elemH, elemIH, elemIW, elemPos, elemW, gap, j, k, len, len1, mainFull, margin, opp, oppFull, pAlign, pArrow, pMain, pos, posFull, position, ref, wrapPos;
		position = this.getPosition();
		pMain = position[0];
		pAlign = position[1];
		pArrow = position[2];
		elemPos = this.elem.position();
		elemH = this.elem.outerHeight();
		elemW = this.elem.outerWidth();
		elemIH = this.elem.innerHeight();
		elemIW = this.elem.innerWidth();
		wrapPos = this.wrapper.position();
		contH = this.container.height();
		contW = this.container.width();
		mainFull = positions[pMain];
		opp = opposites[pMain];
		oppFull = positions[opp];
		css = {};
		css[oppFull] = pMain === "b" ? elemH : pMain === "r" ? elemW : 0;
		incr(css, "top", elemPos.top - wrapPos.top);
		incr(css, "left", elemPos.left - wrapPos.left);
		ref = ["top", "left"];
		for (j = 0, len = ref.length; j < len; j++) {
			pos = ref[j];
			margin = parseInt(this.elem.css("margin-" + pos), 10);
			if (margin) {
				incr(css, pos, margin);
			}
		}
		gap = Math.max(0, this.options.gap - (this.options.arrowShow ? arrowSize : 0));
		incr(css, oppFull, gap);
		if (!this.options.arrowShow) {
			this.arrow.hide();
		} else {
			arrowSize = this.options.arrowSize;
			arrowCss = $.extend({}, css);
			arrowColor = this.userContainer.css("border-color") || this.userContainer.css("border-top-color") || this.userContainer.css("background-color") || "white";
			for (k = 0, len1 = mainPositions.length; k < len1; k++) {
				pos = mainPositions[k];
				posFull = positions[pos];
				if (pos === opp) {
					continue;
				}
				color = posFull === mainFull ? arrowColor : "transparent";
				arrowCss["border-" + posFull] = arrowSize + "px solid " + color;
			}
			incr(css, positions[opp], arrowSize);
			if (indexOf.call(mainPositions, pAlign) >= 0) {
				incr(arrowCss, positions[pAlign], arrowSize * 2);
			}
		}
		if (indexOf.call(vAligns, pMain) >= 0) {
			incr(css, "left", realign(pAlign, contW, elemW));
			if (arrowCss) {
				incr(arrowCss, "left", realign(pAlign, arrowSize, elemIW));
			}
		} else if (indexOf.call(hAligns, pMain) >= 0) {
			incr(css, "top", realign(pAlign, contH, elemH));
			if (arrowCss) {
				incr(arrowCss, "top", realign(pAlign, arrowSize, elemIH));
			}
		}
		if (this.container.is(":visible")) {
			css.display = "block";
		}
		this.container.removeAttr("style").css(css);
		if (arrowCss) {
			return this.arrow.removeAttr("style").css(arrowCss);
		}
	};

	Notification.prototype.getPosition = function() {
		var pos, ref, ref1, ref2, ref3, ref4, ref5, text;
		text = this.options.position || (this.elem ? this.options.elementPosition : this.options.globalPosition);
		pos = parsePosition(text);
		if (pos.length === 0) {
			pos[0] = "b";
		}
		if (ref = pos[0], indexOf.call(mainPositions, ref) < 0) {
			throw "Must be one of [" + mainPositions + "]";
		}
		if (pos.length === 1 || ((ref1 = pos[0], indexOf.call(vAligns, ref1) >= 0) && (ref2 = pos[1], indexOf.call(hAligns, ref2) < 0)) || ((ref3 = pos[0], indexOf.call(hAligns, ref3) >= 0) && (ref4 = pos[1], indexOf.call(vAligns, ref4) < 0))) {
			pos[1] = (ref5 = pos[0], indexOf.call(hAligns, ref5) >= 0) ? "m" : "l";
		}
		if (pos.length === 2) {
			pos[2] = pos[1];
		}
		return pos;
	};

	Notification.prototype.getStyle = function(name) {
		var style;
		if (!name) {
			name = this.options.style;
		}
		if (!name) {
			name = "default";
		}
		style = styles[name];
		if (!style) {
			throw "Missing style: " + name;
		}
		return style;
	};

	Notification.prototype.updateClasses = function() {
		var classes, style;
		classes = ["base"];
		if ($.isArray(this.options.className)) {
			classes = classes.concat(this.options.className);
		} else if (this.options.className) {
			classes.push(this.options.className);
		}
		style = this.getStyle();
		classes = $.map(classes, function(n) {
			return pluginClassName + "-" + style.name + "-" + n;
		}).join(" ");
		return this.userContainer.attr("class", classes);
	};

	Notification.prototype.run = function(data, options) {
		var d, datas, name, type, value;
		if ($.isPlainObject(options)) {
			$.extend(this.options, options);
		} else if ($.type(options) === "string") {
			this.options.className = options;
		}
		if (this.container && !data) {
			this.show(false);
			return;
		} else if (!this.container && !data) {
			return;
		}
		datas = {};
		if ($.isPlainObject(data)) {
			datas = data;
		} else {
			datas[blankFieldName] = data;
		}
		for (name in datas) {
			d = datas[name];
			type = this.userFields[name];
			if (!type) {
				continue;
			}
            if (type === "text" && this.options.encodeMess) {
				d = encode(d);
				if (this.options.breakNewLines) {
					d = d.replace(/\n/g, '<br/>');
				}
			}
			value = name === blankFieldName ? '' : '=' + name;
			find(this.userContainer, "[data-notify-" + type + value + "]").html(d);
		}
		this.updateClasses();
		if (this.elem) {
			this.setElementPosition();
		} else {
			this.setGlobalPosition();
		}
		this.show(true);
		if (this.options.autoHide) {
			clearTimeout(this.autohideTimer);
			this.autohideTimer = setTimeout(this.show.bind(this, false), this.options.autoHideDelay);
		}
	};

	Notification.prototype.destroy = function() {
		this.wrapper.data(pluginClassName, null);
		this.wrapper.remove();
	};

	$[pluginName] = function(elem, data, options) {
		if ((elem && elem.nodeName) || elem.jquery) {
			$(elem)[pluginName](data, options);
		} else {
			options = data;
			data = elem;
			new Notification(null, data, options);
		}
		return elem;
	};

	$.fn[pluginName] = function(data, options) {
		$(this).each(function() {
			var prev = getAnchorElement($(this)).data(pluginClassName);
			if (prev) {
				prev.destroy();
			}
			var curr = new Notification($(this), data, options);
		});
		return this;
	};

	$.extend($[pluginName], {
		defaults: defaults,
		addStyle: addStyle,
		removeStyle: removeStyle,
		pluginOptions: pluginOptions,
		getStyle: getStyle,
		insertCSS: insertCSS
	});

	//always include the default bootstrap style
	addStyle("bootstrap", {
		html: "<div>\n<span data-notify-text></span>\n</div>",
		classes: {
			base: {
				"font-weight": "bold",
				"padding": "8px 15px 8px 14px",
				"text-shadow": "0 1px 0 rgba(255, 255, 255, 0.5)",
				"background-color": "#fcf8e3",
                "border": "1px solid #fbeed5",
                "display": "flex",
                "align-items": "center",
                "min-height": "100px",
				//"border-radius": "4px",
				"white-space": "nowrap",
				"padding-left": "15px",
				"background-repeat": "no-repeat",
				"background-position": "3px 7px"
			},
			error: {
				"color": "#B94A48",
				"background-color": "#F2DEDE",
				"border-color": "#EED3D7",
			},
			success: {
				"color": "#468847",
				"background-color": "#DFF0D8",
				"border-color": "#D6E9C6",
			},
			info: {
				"color": "#3A87AD",
				"background-color": "#D9EDF7",
				"border-color": "#BCE8F1",
			},
			warn: {
				"color": "#C09853",
				"background-color": "#FCF8E3",
				"border-color": "#FBEED5",
			}
		}
	});

	$(function() {
		insertCSS(coreStyle.css).attr("id", "core-notify");
		$(document).on("click", "." + pluginClassName + "-hidable", function(e) {
			$(this).trigger("notify-hide");
		});
		$(document).on("notify-hide", "." + pluginClassName + "-wrapper", function(e) {
			var elem = $(this).data(pluginClassName);
			if(elem) {
				elem.show(false);
			}
		});
	});

}));

/*! lazysizes - v5.2.0 */
!function (a, b) { var c = function () { b(a.lazySizes), a.removeEventListener("lazyunveilread", c, !0) }; b = b.bind(null, a, a.document), "object" == typeof module && module.exports ? b(require("lazysizes")) : a.lazySizes ? c() : a.addEventListener("lazyunveilread", c, !0) }(window, function (a, b, c) { "use strict"; if (a.addEventListener) { var d = c.cfg, e = /\s+/g, f = /\s*\|\s+|\s+\|\s*/g, g = /^(.+?)(?:\s+\[\s*(.+?)\s*\])(?:\s+\[\s*(.+?)\s*\])?$/, h = /^\s*\(*\s*type\s*:\s*(.+?)\s*\)*\s*$/, i = /\(|\)|'/, j = { contain: 1, cover: 1 }, k = function (a) { var b = c.gW(a, a.parentNode); return (!a._lazysizesWidth || b > a._lazysizesWidth) && (a._lazysizesWidth = b), a._lazysizesWidth }, l = function (a) { var b; return b = (getComputedStyle(a) || { getPropertyValue: function () { } }).getPropertyValue("background-size"), !j[b] && j[a.style.backgroundSize] && (b = a.style.backgroundSize), b }, m = function (a, b) { if (b) { var c = b.match(h); c && c[1] ? a.setAttribute("type", c[1]) : a.setAttribute("media", d.customMedia[b] || b) } }, n = function (a, c, h) { var i = b.createElement("picture"), j = c.getAttribute(d.sizesAttr), k = c.getAttribute("data-ratio"), l = c.getAttribute("data-optimumx"); c._lazybgset && c._lazybgset.parentNode == c && c.removeChild(c._lazybgset), Object.defineProperty(h, "_lazybgset", { value: c, writable: !0 }), Object.defineProperty(c, "_lazybgset", { value: i, writable: !0 }), a = a.replace(e, " ").split(f), i.style.display = "none", h.className = d.lazyClass, 1 != a.length || j || (j = "auto"), a.forEach(function (a) { var c, e = b.createElement("source"); j && "auto" != j && e.setAttribute("sizes", j), (c = a.match(g)) ? (e.setAttribute(d.srcsetAttr, c[1]), m(e, c[2]), m(e, c[3])) : e.setAttribute(d.srcsetAttr, a), i.appendChild(e) }), j && (h.setAttribute(d.sizesAttr, j), c.removeAttribute(d.sizesAttr), c.removeAttribute("sizes")), l && h.setAttribute("data-optimumx", l), k && h.setAttribute("data-ratio", k), i.appendChild(h), c.appendChild(i) }, o = function (a) { if (a.target._lazybgset) { var b = a.target, d = b._lazybgset, e = b.currentSrc || b.src; if (e) { var f = c.fire(d, "bgsetproxy", { src: e, useSrc: i.test(e) ? JSON.stringify(e) : e }); f.defaultPrevented || (d.style.backgroundImage = "url(" + f.detail.useSrc + ")") } b._lazybgsetLoading && (c.fire(d, "_lazyloaded", {}, !1, !0), delete b._lazybgsetLoading) } }; addEventListener("lazybeforeunveil", function (a) { var d, e, f; !a.defaultPrevented && (d = a.target.getAttribute("data-bgset")) && (f = a.target, e = b.createElement("img"), e.alt = "", e._lazybgsetLoading = !0, a.detail.firesLoad = !0, n(d, f, e), setTimeout(function () { c.loader.unveil(e), c.rAF(function () { c.fire(e, "_lazyloaded", {}, !0, !0), e.complete && o({ target: e }) }) })) }), b.addEventListener("load", o, !0), a.addEventListener("lazybeforesizes", function (a) { if (a.detail.instance == c && a.target._lazybgset && a.detail.dataAttr) { var b = a.target._lazybgset, d = l(b); j[d] && (a.target._lazysizesParentFit = d, c.rAF(function () { a.target.setAttribute("data-parent-fit", d), a.target._lazysizesParentFit && delete a.target._lazysizesParentFit })) } }, !0), b.documentElement.addEventListener("lazybeforesizes", function (a) { !a.defaultPrevented && a.target._lazybgset && a.detail.instance == c && (a.detail.width = k(a.target._lazybgset)) }) } });
/*! lazysizes - v5.2.0 */
!function(a,b){var c=b(a,a.document,Date);a.lazySizes=c,"object"==typeof module&&module.exports&&(module.exports=c)}("undefined"!=typeof window?window:{},function(a,b,c){"use strict";var d,e;if(function(){var b,c={lazyClass:"lazyload",loadedClass:"lazyloaded",loadingClass:"lazyloading",preloadClass:"lazypreload",errorClass:"lazyerror",autosizesClass:"lazyautosizes",srcAttr:"data-src",srcsetAttr:"data-srcset",sizesAttr:"data-sizes",minSize:40,customMedia:{},init:!0,expFactor:1.5,hFac:.8,loadMode:2,loadHidden:!0,ricTimeout:0,throttleDelay:125};e=a.lazySizesConfig||a.lazysizesConfig||{};for(b in c)b in e||(e[b]=c[b])}(),!b||!b.getElementsByClassName)return{init:function(){},cfg:e,noSupport:!0};var f=b.documentElement,g=a.HTMLPictureElement,h="addEventListener",i="getAttribute",j=a[h].bind(a),k=a.setTimeout,l=a.requestAnimationFrame||k,m=a.requestIdleCallback,n=/^picture$/i,o=["load","error","lazyincluded","_lazyloaded"],p={},q=Array.prototype.forEach,r=function(a,b){return p[b]||(p[b]=new RegExp("(\\s|^)"+b+"(\\s|$)")),p[b].test(a[i]("class")||"")&&p[b]},s=function(a,b){r(a,b)||a.setAttribute("class",(a[i]("class")||"").trim()+" "+b)},t=function(a,b){var c;(c=r(a,b))&&a.setAttribute("class",(a[i]("class")||"").replace(c," "))},u=function(a,b,c){var d=c?h:"removeEventListener";c&&u(a,b),o.forEach(function(c){a[d](c,b)})},v=function(a,c,e,f,g){var h=b.createEvent("Event");return e||(e={}),e.instance=d,h.initEvent(c,!f,!g),h.detail=e,a.dispatchEvent(h),h},w=function(b,c){var d;!g&&(d=a.picturefill||e.pf)?(c&&c.src&&!b[i]("srcset")&&b.setAttribute("srcset",c.src),d({reevaluate:!0,elements:[b]})):c&&c.src&&(b.src=c.src)},x=function(a,b){return(getComputedStyle(a,null)||{})[b]},y=function(a,b,c){for(c=c||a.offsetWidth;c<e.minSize&&b&&!a._lazysizesWidth;)c=b.offsetWidth,b=b.parentNode;return c},z=function(){var a,c,d=[],e=[],f=d,g=function(){var b=f;for(f=d.length?e:d,a=!0,c=!1;b.length;)b.shift()();a=!1},h=function(d,e){a&&!e?d.apply(this,arguments):(f.push(d),c||(c=!0,(b.hidden?k:l)(g)))};return h._lsFlush=g,h}(),A=function(a,b){return b?function(){z(a)}:function(){var b=this,c=arguments;z(function(){a.apply(b,c)})}},B=function(a){var b,d=0,f=e.throttleDelay,g=e.ricTimeout,h=function(){b=!1,d=c.now(),a()},i=m&&g>49?function(){m(h,{timeout:g}),g!==e.ricTimeout&&(g=e.ricTimeout)}:A(function(){k(h)},!0);return function(a){var e;(a=!0===a)&&(g=33),b||(b=!0,e=f-(c.now()-d),e<0&&(e=0),a||e<9?i():k(i,e))}},C=function(a){var b,d,e=99,f=function(){b=null,a()},g=function(){var a=c.now()-d;a<e?k(g,e-a):(m||f)(f)};return function(){d=c.now(),b||(b=k(g,e))}},D=function(){var g,m,o,p,y,D,F,G,H,I,J,K,L=/^img$/i,M=/^iframe$/i,N="onscroll"in a&&!/(gle|ing)bot/.test(navigator.userAgent),O=0,P=0,Q=0,R=-1,S=function(a){Q--,(!a||Q<0||!a.target)&&(Q=0)},T=function(a){return null==K&&(K="hidden"==x(b.body,"visibility")),K||!("hidden"==x(a.parentNode,"visibility")&&"hidden"==x(a,"visibility"))},U=function(a,c){var d,e=a,g=T(a);for(G-=c,J+=c,H-=c,I+=c;g&&(e=e.offsetParent)&&e!=b.body&&e!=f;)(g=(x(e,"opacity")||1)>0)&&"visible"!=x(e,"overflow")&&(d=e.getBoundingClientRect(),g=I>d.left&&H<d.right&&J>d.top-1&&G<d.bottom+1);return g},V=function(){var a,c,h,j,k,l,n,o,q,r,s,t,u=d.elements;if((p=e.loadMode)&&Q<8&&(a=u.length)){for(c=0,R++;c<a;c++)if(u[c]&&!u[c]._lazyRace)if(!N||d.prematureUnveil&&d.prematureUnveil(u[c]))ba(u[c]);else if((o=u[c][i]("data-expand"))&&(l=1*o)||(l=P),r||(r=!e.expand||e.expand<1?f.clientHeight>500&&f.clientWidth>500?500:370:e.expand,d._defEx=r,s=r*e.expFactor,t=e.hFac,K=null,P<s&&Q<1&&R>2&&p>2&&!b.hidden?(P=s,R=0):P=p>1&&R>1&&Q<6?r:O),q!==l&&(D=innerWidth+l*t,F=innerHeight+l,n=-1*l,q=l),h=u[c].getBoundingClientRect(),(J=h.bottom)>=n&&(G=h.top)<=F&&(I=h.right)>=n*t&&(H=h.left)<=D&&(J||I||H||G)&&(e.loadHidden||T(u[c]))&&(m&&Q<3&&!o&&(p<3||R<4)||U(u[c],l))){if(ba(u[c]),k=!0,Q>9)break}else!k&&m&&!j&&Q<4&&R<4&&p>2&&(g[0]||e.preloadAfterLoad)&&(g[0]||!o&&(J||I||H||G||"auto"!=u[c][i](e.sizesAttr)))&&(j=g[0]||u[c]);j&&!k&&ba(j)}},W=B(V),X=function(a){var b=a.target;if(b._lazyCache)return void delete b._lazyCache;S(a),s(b,e.loadedClass),t(b,e.loadingClass),u(b,Z),v(b,"lazyloaded")},Y=A(X),Z=function(a){Y({target:a.target})},$=function(a,b){try{a.contentWindow.location.replace(b)}catch(c){a.src=b}},_=function(a){var b,c=a[i](e.srcsetAttr);(b=e.customMedia[a[i]("data-media")||a[i]("media")])&&a.setAttribute("media",b),c&&a.setAttribute("srcset",c)},aa=A(function(a,b,c,d,f){var g,h,j,l,m,p;(m=v(a,"lazybeforeunveil",b)).defaultPrevented||(d&&(c?s(a,e.autosizesClass):a.setAttribute("sizes",d)),h=a[i](e.srcsetAttr),g=a[i](e.srcAttr),f&&(j=a.parentNode,l=j&&n.test(j.nodeName||"")),p=b.firesLoad||"src"in a&&(h||g||l),m={target:a},s(a,e.loadingClass),p&&(clearTimeout(o),o=k(S,2500),u(a,Z,!0)),l&&q.call(j.getElementsByTagName("source"),_),h?a.setAttribute("srcset",h):g&&!l&&(M.test(a.nodeName)?$(a,g):a.src=g),f&&(h||l)&&w(a,{src:g})),a._lazyRace&&delete a._lazyRace,t(a,e.lazyClass),z(function(){var b=a.complete&&a.naturalWidth>1;p&&!b||(b&&s(a,"ls-is-cached"),X(m),a._lazyCache=!0,k(function(){"_lazyCache"in a&&delete a._lazyCache},9)),"lazy"==a.loading&&Q--},!0)}),ba=function(a){if(!a._lazyRace){var b,c=L.test(a.nodeName),d=c&&(a[i](e.sizesAttr)||a[i]("sizes")),f="auto"==d;(!f&&m||!c||!a[i]("src")&&!a.srcset||a.complete||r(a,e.errorClass)||!r(a,e.lazyClass))&&(b=v(a,"lazyunveilread").detail,f&&E.updateElem(a,!0,a.offsetWidth),a._lazyRace=!0,Q++,aa(a,b,f,d,c))}},ca=C(function(){e.loadMode=3,W()}),da=function(){3==e.loadMode&&(e.loadMode=2),ca()},ea=function(){if(!m){if(c.now()-y<999)return void k(ea,999);m=!0,e.loadMode=3,W(),j("scroll",da,!0)}};return{_:function(){y=c.now(),d.elements=b.getElementsByClassName(e.lazyClass),g=b.getElementsByClassName(e.lazyClass+" "+e.preloadClass),j("scroll",W,!0),j("resize",W,!0),j("pageshow",function(a){if(a.persisted){var c=b.querySelectorAll("."+e.loadingClass);c.length&&c.forEach&&l(function(){c.forEach(function(a){a.complete&&ba(a)})})}}),a.MutationObserver?new MutationObserver(W).observe(f,{childList:!0,subtree:!0,attributes:!0}):(f[h]("DOMNodeInserted",W,!0),f[h]("DOMAttrModified",W,!0),setInterval(W,999)),j("hashchange",W,!0),["focus","mouseover","click","load","transitionend","animationend"].forEach(function(a){b[h](a,W,!0)}),/d$|^c/.test(b.readyState)?ea():(j("load",ea),b[h]("DOMContentLoaded",W),k(ea,2e4)),d.elements.length?(V(),z._lsFlush()):W()},checkElems:W,unveil:ba,_aLSL:da}}(),E=function(){var a,c=A(function(a,b,c,d){var e,f,g;if(a._lazysizesWidth=d,d+="px",a.setAttribute("sizes",d),n.test(b.nodeName||""))for(e=b.getElementsByTagName("source"),f=0,g=e.length;f<g;f++)e[f].setAttribute("sizes",d);c.detail.dataAttr||w(a,c.detail)}),d=function(a,b,d){var e,f=a.parentNode;f&&(d=y(a,f,d),e=v(a,"lazybeforesizes",{width:d,dataAttr:!!b}),e.defaultPrevented||(d=e.detail.width)&&d!==a._lazysizesWidth&&c(a,f,e,d))},f=function(){var b,c=a.length;if(c)for(b=0;b<c;b++)d(a[b])},g=C(f);return{_:function(){a=b.getElementsByClassName(e.autosizesClass),j("resize",g)},checkElems:g,updateElem:d}}(),F=function(){!F.i&&b.getElementsByClassName&&(F.i=!0,E._(),D._())};return k(function(){e.init&&F()}),d={cfg:e,autoSizer:E,loader:D,init:F,uP:w,aC:s,rC:t,hC:r,fire:v,gW:y,rAF:z}});
//# sourceMappingURL=main.min.js.map

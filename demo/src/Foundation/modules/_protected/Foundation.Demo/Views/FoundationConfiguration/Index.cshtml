@using NonFactors.Mvc.Grid
@using EPiServer.Shell
@inherits WebViewPage<Foundation.Demo.Configuration.ConfigurationViewModel>

<head>
    <title>Configuration</title>
</head>
<main class="dash-content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <ul class="nav nav-tabs" id="configurationTab" role="tablist" style="margin-bottom: 20px">
                    <li class="nav-item">
                        <a class="nav-link active" id="site-tab" data-toggle="tab" href="#site" role="tab" aria-controls="site" aria-selected="true">Site</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="catalog-tab" data-toggle="tab" href="#catalog" role="tab" aria-controls="catalog" aria-selected="false">Catalog</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="visitorgroup-tab" data-toggle="tab" href="#visitorgroup" role="tab" aria-controls="visitorgroup" aria-selected="false">Visitor Group</a>
                    </li>
                </ul>
                <div class="tab-content" id="configurationTabContent">
                    <div class="tab-pane fade show active" id="site" role="tabpanel" aria-labelledby="site-tab">
                        <div class="row">
                            <div class="col-12 col-md-6">
                                <div class="card spur-card">
                                    <div class="card-header">
                                        <div class="spur-card-icon">
                                            <i class="fas fa-desktop"></i>
                                        </div>
                                        <div class="spur-card-title">@Html.TranslateFallback("Import Site", "Import Site")</div>
                                    </div>
                                    <div class="card-body">
                                        @using (Html.BeginForm("AddSite", "FoundationConfiguration", FormMethod.Post, new { enctype = "multipart/form-data" }))
                                        {
                                            @Html.AntiForgeryToken()
                                            <div class="custom-control custom-radio">
                                                <input class="custom-control-input importSites" type="radio" name="siteImportLocation" id="localSiteImportLocation" value="Local" checked="checked">
                                                <label class="custom-control-label" for="localSiteImportLocation">
                                                    @Html.TranslateFallback("Site from disk", "Site from Disk")
                                                </label>
                                            </div>
                                            <div class="custom-control custom-radio">
                                                <input class="custom-control-input importSites" type="radio" name="siteImportLocation" id="remoteSiteImportLocation" value="Remote">
                                                <label class="custom-control-label" for="remoteSiteImportLocation">
                                                    @Html.TranslateFallback("Site from Blob Storage", "Site from Blob Storage")
                                                </label>
                                            </div>
                                            <div id="localSiteImportDiv" class="form-group">
                                                <label for="SiteImportFile"> @Html.TranslateFallback("Import site episerverdata file", "Import site episerverdata file")</label>
                                                @Html.TextBoxFor(x => x.SiteImportFile, new { type = "file", name = "SiteImportFile", @class = "form-control-file" })
                                            </div>
                                            <div id="remoteSiteImportDiv" class="form-group">
                                                @(Html
                                                    .Grid("_Grid", Model.Sites)
                                                    .Build(columns =>
                                                    {
                                                        columns.Add(model => Html.RadioButton("SelectedSiteName", model.Url));
                                                        columns.Add(model => model.Name).Titled("Name");
                                                        columns.Add(model => model.LastModified).Titled("Modified");
                                                        columns.Add(model => model.SizeString).Titled("Size");
                                                    })
                                                    .Pageable(pager =>
                                                    {
                                                        pager.PartialViewName = "_Pager";
                                                        pager.CurrentPage = Model.SitePage;
                                                        pager.RowsPerPage = Model.SitePageSize;
                                                    })
                                                    .Css("css-classes")
                                                    .AppendCss("table-hover")
                                                    .Filterable()
                                                    .Sortable()
                                                )
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(x => x.SiteName)
                                                @Html.TextBoxFor(x => x.SiteName, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(x => x.SiteName)
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(x => x.SiteDomainName)
                                                @Html.TextBoxFor(x => x.SiteDomainName, new { @class = "form-control" })
                                                @Html.ValidationMessageFor(x => x.SiteDomainName)
                                            </div>
                                            <input type="submit" class="btn btn-primary" />
                                        }

                                    </div>
                                </div>
                            </div>
                            <div class="col-12 col-md-6">
                                <div class="card spur-card">
                                    <div class="card-header">
                                        <div class="spur-card-icon">
                                            <i class="fas fa-desktop"></i>
                                        </div>
                                        <div class="spur-card-title">@Html.TranslateFallback("Export Site", "Export Site")</div>
                                    </div>
                                    <div class="card-body">
                                        @using (Html.BeginForm("ExportSite", "FoundationConfiguration", FormMethod.Post))
                                        {
                                            @Html.AntiForgeryToken()
                                            <div class="form-group">
                                                @(Html
                                                    .Grid("_Grid", Model.LocalSites)
                                                    .Build(columns =>
                                                    {
                                                        columns.Add(model => Html.RadioButton("LocalSelectedSiteName", model.Name));
                                                        columns.Add(model => model.Name).Titled("Name");
                                                        columns.Add(model => model.SiteUrl.ToString()).Titled("Primary");
                                                    })
                                                    .Css("css-classes")
                                                    .AppendCss("table-hover")
                                                    .Filterable()
                                                    .Sortable()
                                                )
                                                @Html.ValidationMessageFor(x => x.LocalSelectedSiteName)
                                            </div>
                                            <div class="custom-control custom-radio">
                                                <input class="custom-control-input exportSites" type="radio" name="siteExportLocation" id="localSiteExportLocation" value="Local" checked="checked">
                                                <label class="custom-control-label" for="localSiteExportLocation">
                                                    @Html.TranslateFallback("Site to Disk", "Site to Disk")
                                                </label>
                                            </div>
                                            <div class="custom-control custom-radio">
                                                <input class="custom-control-input exportSites" type="radio" name="siteExportLocation" id="remoteSiteExportLocation" value="Remote">
                                                <label class="custom-control-label" for="remoteSiteExportLocation">
                                                    @Html.TranslateFallback("Site to Blob Storage", "Site to Blob Storage")
                                                </label>
                                            </div>
                                            <div id="localSiteExportDiv" class="form-group">

                                            </div>
                                            <div id="remoteSiteExportDiv">

                                                <div class="form-group">
                                                    @Html.LabelFor(x => x.LocalSiteName)
                                                    @Html.TextBoxFor(x => x.LocalSiteName, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(x => x.LocalSiteName)
                                                </div>
                                            </div>
                                            <input type="submit" class="btn btn-primary" value="Export" />
                                        }

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="catalog" role="tabpanel" aria-labelledby="catalog-tab">
                        <div class="row">
                            <div class="col-12 col-md-6">
                                <div class="card spur-card">
                                    <div class="card-header">
                                        <div class="spur-card-icon">
                                            <i class="fas fa-database"></i>
                                        </div>
                                        <div class="spur-card-title">@Html.TranslateFallback("Import Catalog", "Import Catalog")</div>
                                    </div>
                                    <div class="card-body">
                                        @using (Html.BeginForm("AddCatalog", "FoundationConfiguration", FormMethod.Post, new { enctype = "multipart/form-data" }))
                                        {
                                            @Html.AntiForgeryToken()
                                            <div class="custom-control custom-radio">
                                                <input class="custom-control-input importCatalogs" type="radio" name="catalogImportLocation" id="localCatalogImportLocation" value="Local" checked="checked">
                                                <label class="custom-control-label" for="localCatalogImportLocation">
                                                    @Html.TranslateFallback("Catalog from Disk", "Catalog from Disk")
                                                </label>
                                            </div>
                                            <div class="custom-control custom-radio">
                                                <input class="custom-control-input importCatalogs" type="radio" name="catalogImportLocation" id="remoteCatalogImportLocation" value="Remote">
                                                <label class="custom-control-label" for="remoteCatalogImportLocation">
                                                    @Html.TranslateFallback("Catalog from Blob Storage", "Catalog from Blob Storage")
                                                </label>
                                            </div>
                                            <div id="localCatalogImportDiv" class="form-group">
                                                <label for="CatalogImportFile">@Html.TranslateFallback("Import catalog zip file", "Import catalog zip file")</label>
                                                @Html.TextBoxFor(x => x.CatalogImportFile, new { type = "file", name = "CatalogImportFile", @class = "form-control-file" })
                                            </div>
                                            <div id="remoteCatalogImportDiv" class="form-group">
                                                @(Html
                                                    .Grid("_Grid", Model.Catalogs)
                                                    .Build(columns =>
                                                    {
                                                        columns.Add(model => Html.RadioButton("SelectedCatalogName", model.Url));
                                                        columns.Add(model => model.Name).Titled("Name");
                                                        columns.Add(model => model.LastModified).Titled("Modified");
                                                        columns.Add(model => model.SizeString).Titled("Size");
                                                    })
                                                    .Pageable(pager =>
                                                    {
                                                        pager.PartialViewName = "_Pager";
                                                        pager.CurrentPage = Model.CatalogPage;
                                                        pager.RowsPerPage = Model.CatalogPageSize;
                                                    })
                                                    .Css("css-classes")
                                                    .AppendCss("table-hover")
                                                    .Filterable()
                                                    .Sortable()
                                                )
                                            </div>
                                            <input type="submit" class="btn btn-primary" />
                                        }

                                    </div>
                                </div>
                            </div>
                            <div class="col-12 col-md-6">
                                <div class="card spur-card">
                                    <div class="card-header">
                                        <div class="spur-card-icon">
                                            <i class="fas fa-database"></i>
                                        </div>
                                        <div class="spur-card-title">@Html.TranslateFallback("Export Catalog", "Export Catalog")</div>
                                    </div>
                                    <div class="card-body">
                                        @using (Html.BeginForm("ExportCatalog", "FoundationConfiguration", FormMethod.Post))
                                        {
                                            @Html.AntiForgeryToken()
                                            <div class="form-group">
                                                @(Html
                                                    .Grid("_Grid", Model.LocalCatalogs)
                                                    .Build(columns =>
                                                    {
                                                        columns.Add(model => Html.RadioButton("LocalSelectedCatalogName", model.Name));
                                                        columns.Add(model => model.Name).Titled("Name");
                                                        columns.Add(model => model.DefaultCurrency).Titled("Default Currency");
                                                        columns.Add(model => model.DefaultLanguage).Titled("Default Language");
                                                    })
                                                    .Css("css-classes")
                                                    .AppendCss("table-hover")
                                                    .Filterable()
                                                    .Sortable()
                                                )
                                                @Html.ValidationMessageFor(x => x.LocalSelectedCatalogName)
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(x => x.MediaFolder)
                                                <div id="catalog-tree"></div>
                                                @Html.ValidationMessageFor(x => x.MediaFolder)
                                            </div>
                                            <div class="custom-control custom-radio">
                                                <input class="custom-control-input exportCatalogs" type="radio" name="catalogExportLocation" id="localCatalogExportLocation" value="Local" checked="checked">
                                                <label class="custom-control-label" for="localCatalogExportLocation">
                                                    @Html.TranslateFallback("Catalog to Disk", "Catalog to Disk")
                                                </label>
                                            </div>
                                            <div class="custom-control custom-radio">
                                                <input class="custom-control-input exportCatalogs" type="radio" name="catalogExportLocation" id="remoteCatalogExportLocation" value="Remote">
                                                <label class="custom-control-label" for="remoteCatalogExportLocation">
                                                    @Html.TranslateFallback("Catalog to Blob Storage", "Catalog to Blob Storage")
                                                </label>
                                            </div>
                                            <div id="localCatalogExportDiv" class="form-group">

                                            </div>
                                            <div id="remoteCatalogExportDiv">
                                                <div class="form-group">
                                                    @Html.LabelFor(x => x.LocalCatalogName)
                                                    @Html.TextBoxFor(x => x.LocalCatalogName, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(x => x.LocalCatalogName)
                                                </div>
                                            </div>

                                            @Html.HiddenFor(x => x.MediaFolder)

                                            <input type="submit" class="btn btn-primary jsExportCatalog" value="Export" />
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="visitorgroup" role="tabpanel" aria-labelledby="visitorgroup-tab">
                        <div class="row">
                            <div class="col-12 col-md-6">
                                <div class="card spur-card">
                                    <div class="card-header">
                                        <div class="spur-card-icon">
                                            <i class="fas fa-users"></i>
                                        </div>
                                        <div class="spur-card-title">@Html.TranslateFallback("Import Visitor Group", "Import Visitor Group")</div>
                                    </div>
                                    <div class="card-body">
                                        @using (Html.BeginForm("ImportVisitorGroup", "FoundationConfiguration", FormMethod.Post, new { enctype = "multipart/form-data" }))
                                        {
                                            @Html.AntiForgeryToken()
                                            <div class="custom-control custom-radio">
                                                <input class="custom-control-input importVisitorGroups" type="radio" name="visitorGroupImportLocation" id="localVisitorGroupImportLocation" value="Local" checked="checked">
                                                <label class="custom-control-label" for="localVisitorGroupImportLocation">
                                                    @Html.TranslateFallback("Visitor Group from Disk", "Visitor Group from Disk")
                                                </label>
                                            </div>
                                            <div class="custom-control custom-radio">
                                                <input class="custom-control-input importVisitorGroups" type="radio" name="visitorGroupImportLocation" id="remoteVisitorGroupImportLocation" value="Remote">
                                                <label class="custom-control-label" for="remoteVisitorGroupImportLocation">
                                                    @Html.TranslateFallback("Visitor Group from Blob Storage", "Visitor Group from Blob Storage")
                                                </label>
                                            </div>
                                            <div id="localVisitorGroupImportDiv" class="form-group">
                                                <label for="visitorGroupImportFile">@Html.TranslateFallback("Import Visitor Group zip file", "Import Visitor Group zip file")</label>
                                                @Html.TextBoxFor(x => x.VisitorGroupImportFile, new { type = "file", name = "VisitorGroupImportFile", @class = "form-control-file" })
                                            </div>
                                            <div id="remoteVisitorGroupImportDiv" class="form-group">
                                                @(Html
                                                    .Grid("_Grid", Model.VisitorGroups)
                                                    .Build(columns =>
                                                    {
                                                        columns.Add(model => Html.RadioButton("SelectedRemoteVisitorGroup", model.Url));
                                                        columns.Add(model => model.Name).Titled("Name");
                                                        columns.Add(model => model.LastModified).Titled("Modified");
                                                        columns.Add(model => model.SizeString).Titled("Size");
                                                    })
                                                    .Pageable(pager =>
                                                    {
                                                        pager.PartialViewName = "_Pager";
                                                        pager.CurrentPage = Model.SitePage;
                                                        pager.RowsPerPage = Model.SitePageSize;
                                                    })
                                                    .Css("css-classes")
                                                    .AppendCss("table-hover")
                                                    .Filterable()
                                                    .Sortable()
                                                )
                                            </div>
                                            <input type="submit" class="btn btn-primary" />
                                        }

                                    </div>
                                </div>
                            </div>
                            <div class="col-12 col-md-6">
                                <div class="card spur-card">
                                    <div class="card-header">
                                        <div class="spur-card-icon">
                                            <i class="fas fa-users"></i>
                                        </div>
                                        <div class="spur-card-title">@Html.TranslateFallback("Export Visitor Group", "Export Visitor Group")</div>
                                    </div>
                                    <div class="card-body">
                                        @using (Html.BeginForm("ExportVisitorGroups", "FoundationConfiguration", FormMethod.Post))
                                        {
                                            @Html.AntiForgeryToken()
                                            <div class="form-group">
                                                <label>List of visitor groups:</label>
                                                @if (Model.LocalVisitorGroups.Count() == 0)
                                                {
                                                    <p>No visitor group</p>
                                                }
                                                else
                                                {
                                                    foreach (var item in Model.LocalVisitorGroups)
                                                    {
                                                        <div class="form-check">
                                                            <input type="checkbox" name="SelectedVisitorGroupItems" value="@item.Id" checked="checked">
                                                            <label class="form-check-label">@item.Name</label>
                                                        </div>
                                                    }
                                                }
                                            </div>
                                            <div class="custom-control custom-radio">
                                                <input class="custom-control-input exportVisitorGroups" type="radio" name="visitorGroupExportLocation" id="localVisitorGroupExportLocation" value="Local" checked="checked">
                                                <label class="custom-control-label" for="localVisitorGroupExportLocation">
                                                    @Html.TranslateFallback("Visitor Group to Disk", "Visitor Group to Disk")
                                                </label>
                                            </div>
                                            <div class="custom-control custom-radio">
                                                <input class="custom-control-input exportVisitorGroups" type="radio" name="visitorGroupExportLocation" id="remoteVisitorGroupExportLocation" value="Remote">
                                                <label class="custom-control-label" for="remoteVisitorGroupExportLocation">
                                                    @Html.TranslateFallback("Visitor Group to Blob Storage", "Visitor Group to Blob Storage")
                                                </label>
                                            </div>
                                            <div id="localVisitorGroupExportDiv" class="form-group">

                                            </div>
                                            <div id="remoteVisitorGroupExportDiv">
                                                <div class="form-group">
                                                    @Html.LabelFor(x => x.VisitorGroupName)
                                                    @Html.TextBoxFor(x => x.VisitorGroupName, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(x => x.VisitorGroupName)
                                                </div>
                                            </div>

                                            <input type="submit" class="btn btn-primary jsExportVisitorGroups" value="Export" />
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

@section AdditionalScripts {
    <script src="~/Assets/js/vendors/gijgo/gijgo.min.js" type="text/javascript"></script>
    <script type="text/javascript">
       $(document).ready(function () {
            var tree = $('#catalog-tree').tree({
                uiLibrary: 'bootstrap4',
                dataSource: '@Paths.ToResource("Foundation.Demo", "foundationconfiguration/gettree")',
                primaryKey: 'Value',
                lazyLoading: true,
                textField: "Text",
                hasChildrenField: 'Disabled',
            });

           $('.jsExportCatalog').on('click', function () {
               var selections = tree.getSelections();
               selections && selections.length && $('#MediaFolder').val(selections[0]);
               $(this).closest("form").submit();
           });

           $(document).on("change", ".importSites", importSiteChanged);
           $(document).on("change", ".exportSites", exportSiteChanged);
           $(document).on("change", ".importCatalogs", importCatalogChanged);
           $(document).on("change", ".exportCatalogs", exportCatalogChanged);
           $(document).on("change", ".importVisitorGroups", importVisitorGroupChanged);
           $(document).on("change", ".exportVisitorGroups", exportVisitorGroupChanged);
           document.getElementById("remoteSiteImportDiv").style.display = "none";
           document.getElementById("remoteSiteExportDiv").style.display = "none";
           document.getElementById("remoteCatalogImportDiv").style.display = "none";
           document.getElementById("remoteCatalogExportDiv").style.display = "none";
           document.getElementById("remoteVisitorGroupImportDiv").style.display = "none";
           document.getElementById("remoteVisitorGroupExportDiv").style.display = "none";
       });

       function importSiteChanged() {
            let selectedValue = $("input[name='siteImportLocation']:checked").val();
            let localDiv = document.getElementById("localSiteImportDiv");
            let remoteDiv = document.getElementById("remoteSiteImportDiv");
            localDiv.style.display = selectedValue === 'Local' ? "block" : "none";
            remoteDiv.style.display = selectedValue === 'Remote' ? "block" : "none";
        }

        function exportSiteChanged() {
            let selectedValue = $("input[name='siteExportLocation']:checked").val();
            let localDiv = document.getElementById("localSiteExportDiv");
            let remoteDiv = document.getElementById("remoteSiteExportDiv");
            localDiv.style.display = selectedValue === 'Local' ? "block" : "none";
            remoteDiv.style.display = selectedValue === 'Remote' ? "block" : "none";
        }

        function importCatalogChanged() {
            let selectedValue = $("input[name='catalogImportLocation']:checked").val();
            let localDiv = document.getElementById("localCatalogImportDiv");
            let remoteDiv = document.getElementById("remoteCatalogImportDiv");
            localDiv.style.display = selectedValue === 'Local' ? "block" : "none";
            remoteDiv.style.display = selectedValue === 'Remote' ? "block" : "none";
        }

        function exportCatalogChanged() {
            let selectedValue = $("input[name='catalogExportLocation']:checked").val();
            let localDiv = document.getElementById("localCatalogExportDiv");
            let remoteDiv = document.getElementById("remoteCatalogExportDiv");
            localDiv.style.display = selectedValue === 'Local' ? "block" : "none";
            remoteDiv.style.display = selectedValue === 'Remote' ? "block" : "none";
        }

        function importVisitorGroupChanged() {
            let selectedValue = $("input[name='visitorGroupImportLocation']:checked").val();
            let localDiv = document.getElementById("localVisitorGroupImportDiv");
            let remoteDiv = document.getElementById("remoteVisitorGroupImportDiv");
            localDiv.style.display = selectedValue === 'Local' ? "block" : "none";
            remoteDiv.style.display = selectedValue === 'Remote' ? "block" : "none";
        }

        function exportVisitorGroupChanged() {
            let selectedValue = $("input[name='visitorGroupExportLocation']:checked").val();
            let localDiv = document.getElementById("localVisitorGroupExportDiv");
            let remoteDiv = document.getElementById("remoteVisitorGroupExportDiv");
            localDiv.style.display = selectedValue === 'Local' ? "block" : "none";
            remoteDiv.style.display = selectedValue === 'Remote' ? "block" : "none";
        }
    </script>
}

@section AdditionalStyles {
    <link href="~/Assets/scss/vendors/gijgo/css/gijgo.min.css" rel="stylesheet" type="text/css" />
}
